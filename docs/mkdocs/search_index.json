{
    "docs": [
        {
            "location": "/", 
            "text": "Sophon: Automatic API Markdown Documentation Generation for Python\n\n\nWhat is Sophon?\n\n\nSophon is a tool that could \nautomatically generate Markdown-format API documentations\n from Python docstring,\njust like Epydoc(supports reStructuredText\u3001Javadoc\u3001plaintext)\nand Napoleon(Sphinx extension that enables Sphinx to parse both NumPy and Google style docstrings to reStructuredText).\n\n\nSophon is written by \nZhenpeng Deng(monitor1379)\n and licensed under the MIT license.\n\n\nWhy Sophon?\n\n\nFeatures:\n\n\n\n\n\n\nSupport different kinds of docstrings.\n\n    reStructuredText is great, but docstring written in reST creates visually dense and is hard to read.\n    So Sophon mainly supports to parse docstring with the following styles and converts them to Markdown: \n\n\n\n\nSophon style docstring\n\n\n(Coming Soon) \nGoogle style\n, the style recommended by \nKhan Academy\n\n\n(Coming Soon) \nNumPy style\n\nSophon also supports to parse every docstring in Python project,\nincluding docstrings on: \nclasses\n, \nmethods\n and \nfunctions\n\n(\nmodules\n, \nattributes\n and \nvariables\n will be supported soon)\n\n\n\n\n\n\n\n\nOutput Markdown format documentations.\n\n    Markdown is a way to write contents for the web.\n    Unlike cumbersome word processing applications or other markup languages with complicated syntax,\n    text written in Markdown can be easy to read, easy to write and easily shared for between computers, \n    mobile phones, and people. \n    Though it does not do anything fancy like change the font size, color or type by itself,\n    it has enough stuffs to write an API documentation for your python projects.\n\n\nAnother important reason of choosing Markdown is that there are some remarkable tools for Markdown\nto build beautiful documentations or blogs such as\n\nMkDocs(Project documentation with Markdown)\n or \nHexo(A fast, simple \n powerful blog framework)\n.\n\n\n\n\n\n\nEasily and Highly customizable.\n\n    Sophon uses \nYAML: YAML Ain't Markup Language\n as the format of configuration file.\n    By configuring and providing Markdown template files, you can freely organize your documentation,\n    or open some advanced features such as linking API to source files deposited on GitHub repositories.\n\n\n\n\n\n\nOne-Command build.\n \n    you only need one command to build you API documentation.\n\n\n\n\n\n\nWhat does \"Sophon\" mean?\n\n\nSophon\n is the official translation of \"\n\u667a\u5b50\n\" in \u300aRememberance of Earth's Past II: The Dark Forest\u300b\nwhich is written by the famous Chinese science fiction writer named \nCixin Liu(\u5218\u6148\u6b23)\n.\n\n\nSophon\n is a word amalgamation of \nSophia/sophist/sophisticated\n, meaning \nwisdom\n, \nand \nProton/Electron/Neutron/Photon\n, meaning \nparticle\n,\nconsisting of a supercomputer embedded into a single proton that could fold itself to eleven space dimensions.", 
            "title": "Home"
        }, 
        {
            "location": "/#sophon-automatic-api-markdown-documentation-generation-for-python", 
            "text": "", 
            "title": "Sophon: Automatic API Markdown Documentation Generation for Python"
        }, 
        {
            "location": "/#what-is-sophon", 
            "text": "Sophon is a tool that could  automatically generate Markdown-format API documentations  from Python docstring,\njust like Epydoc(supports reStructuredText\u3001Javadoc\u3001plaintext)\nand Napoleon(Sphinx extension that enables Sphinx to parse both NumPy and Google style docstrings to reStructuredText).  Sophon is written by  Zhenpeng Deng(monitor1379)  and licensed under the MIT license.", 
            "title": "What is Sophon?"
        }, 
        {
            "location": "/#why-sophon", 
            "text": "Features:    Support different kinds of docstrings. \n    reStructuredText is great, but docstring written in reST creates visually dense and is hard to read.\n    So Sophon mainly supports to parse docstring with the following styles and converts them to Markdown:    Sophon style docstring  (Coming Soon)  Google style , the style recommended by  Khan Academy  (Coming Soon)  NumPy style \nSophon also supports to parse every docstring in Python project,\nincluding docstrings on:  classes ,  methods  and  functions \n( modules ,  attributes  and  variables  will be supported soon)     Output Markdown format documentations. \n    Markdown is a way to write contents for the web.\n    Unlike cumbersome word processing applications or other markup languages with complicated syntax,\n    text written in Markdown can be easy to read, easy to write and easily shared for between computers, \n    mobile phones, and people. \n    Though it does not do anything fancy like change the font size, color or type by itself,\n    it has enough stuffs to write an API documentation for your python projects.  Another important reason of choosing Markdown is that there are some remarkable tools for Markdown\nto build beautiful documentations or blogs such as MkDocs(Project documentation with Markdown)  or  Hexo(A fast, simple   powerful blog framework) .    Easily and Highly customizable. \n    Sophon uses  YAML: YAML Ain't Markup Language  as the format of configuration file.\n    By configuring and providing Markdown template files, you can freely organize your documentation,\n    or open some advanced features such as linking API to source files deposited on GitHub repositories.    One-Command build.  \n    you only need one command to build you API documentation.", 
            "title": "Why Sophon?"
        }, 
        {
            "location": "/#what-does-sophon-mean", 
            "text": "Sophon  is the official translation of \" \u667a\u5b50 \" in \u300aRememberance of Earth's Past II: The Dark Forest\u300b\nwhich is written by the famous Chinese science fiction writer named  Cixin Liu(\u5218\u6148\u6b23) .  Sophon  is a word amalgamation of  Sophia/sophist/sophisticated , meaning  wisdom , \nand  Proton/Electron/Neutron/Photon , meaning  particle ,\nconsisting of a supercomputer embedded into a single proton that could fold itself to eleven space dimensions.", 
            "title": "What does \"Sophon\" mean?"
        }, 
        {
            "location": "/user_guide/", 
            "text": "", 
            "title": "User Guide"
        }, 
        {
            "location": "/configuration/", 
            "text": "", 
            "title": "Configuration"
        }, 
        {
            "location": "/api/sophon/API/", 
            "text": "API documentations of Sophon\n\n\nThis is some API documentations of Sophon.\n\n\nsophon/parsers.py\n\n\n[source]\n\n\nParser\n\n\nsophon.parsers.Parser.Parser()\n\n\n\n\nTop level base class of parsers.\n\n\n\n\n[source]\n\n\nReStructuredTextParser\n\n\nsophon.parsers.ReStructuredTextParser.ReStructuredTextParser()\n\n\n\n\nSupport soon.\n\n\n\n\n[source]\n\n\nGoogleDocParser\n\n\nsophon.parsers.GoogleDocParser.GoogleDocParser()\n\n\n\n\nSupport soon.\n\n\n\n\n[source]\n\n\nNumPyDocParser\n\n\nsophon.parsers.NumPyDocParser.NumPyDocParser()\n\n\n\n\nSupport soon.\n\n\n\n\nSophonParser\n\n\nsophon.parsers.SophonParser.SophonParser()\n\n\n\n\nA docstring parser for parsing Sophon style docstring to Markdown.\n\n\n\n\n[source]\n\n\nSophonParser.parse_from_class\n\n\nsophon.parsers.SophonParser.parse_from_class(class_, **kwargs)\n\n\n\n\nExtract docstring from class and parse it to Markdown text.\n\n\nArguments\n\n\n\n\nclass_\n: \nclass\n. A class with Sophon style docstring.\n\n\n**kwargs\n: \ndict\n.\n\n\n\n\nReturn\n\n\n\n\nstr\n: Markdown text.\n\n\n\n\n\n\n[source]\n\n\nSophonParser.parse_from_class_with_methods\n\n\nsophon.parsers.SophonParser.parse_from_class_with_methods(class_, **kwargs)\n\n\n\n\nExtract docstring from class and its public members, and parse it to Markdown text.\n\n\nArguments\n\n\n\n\nclass_\n: \nclass\n. A class with Sophon style docstring.\n\n\n**kwargs\n: \ndict\n.\n\n\n\n\nReturn\n\n\n\n\nstr\n: Markdown text.\n\n\n\n\n\n\n[source]\n\n\nSophonParser.parse_from_docstring\n\n\nsophon.parsers.SophonParser.parse_from_docstring(docstring, **kwargs)\n\n\n\n\nParse Sophon style docstring to Markdown text.\n\n\nArguments\n\n\n\n\ndocstring\n: \nstr\n. Sophon style docstring.\n\n\n**kwargs\n: \ndict\n.\n\n\n\n\nReturn\n\n\n\n\nstr\n: Markdown text.\n\n\n\n\n\n\n[source]\n\n\nSophonParser.parse_from_function\n\n\nsophon.parsers.SophonParser.parse_from_function(function, **kwargs)\n\n\n\n\nExtract docstring from function and parse it to Markdown text.\n\n\nArguments\n\n\n\n\nfunction\n: \nfunction\n. A function with Sophon style docstring.\n\n\n**kwargs\n: \ndict\n.\n\n\n\n\nReturn\n\n\n\n\nstr\n: Markdown text.\n\n\n\n\n\n\nsophon/utils.py\n\n\n[source]\n\n\nextract_function_signature\n\n\nsophon.utils.extract_function_signature(function, ismethod=False)\n\n\n\n\nGiven a function, return the signature string of function.\n\n\nArguments\n\n\n\n\nfunction\n: \nfunction\n.\n\n\nismethod\n: \nboolean\n. Represent that if the given function is a method of a class or not.\n    Note that if a \"method\" of class is static, then it is a \nfunction\n instead of \nmethod\n.\n    The simplest way to distinguish \nfunction\n and \nmethod\n is to see if there is a argument\n    named \nself\n in the arguments list of the function.\n\n\n\n\nReturn\n\n\n\n\nstr\n: A string signature of function.\n\n\n\n\nExamples\n\n\nAssume that there are some functions in a module named \nmod\n:\n\n\n# mod.py\nimport sophon\n\ndef foo1():\n    pass\n\ndef foo2(a, b='b', c=None, **kwargs):\n    pass\n\nprint sophon.extract_function_signature(foo1)\n# print \nmod.foo1()\n to the console\n\nprint sophon.extract_function_signature(foo2)\n# print \nmod.foo2(a, b='b', c=None, **kwargs)\n to the console\n\n\n\n\nNow we add a class named \nbar\n to mod.py:\n\n\n# mod.py\nimport sophon\n\nclass bar(object):\n\n    def baz1(self):\n        pass\n\n    def baz2(self, a, b='b', c=None, **kwargs):\n        pass\n\n    @staticmethod\n    def baz3(a, b='b', c=None):\n        pass\n\n\nprint sophon.extract_function_signature(bar.baz1, ismethod=True)\n# print \nmod.bar.baz1()\n to the console\n\nprint sophon.extract_function_signature(bar.baz2, ismethod=True)\n# print \nmod.bar.baz2(a, b='b', c=None, **kwargs)\n to the console\n\nprint sophon.extract_function_signature(bar.baz3, ismethod=False)\n# print \nmod.bar.baz3(a, b='b', c=None, **kwargs)\n to the console\n\n\n\n\n\n\n[source]\n\n\nextract_class_signature\n\n\nsophon.utils.extract_class_signature(clazz)\n\n\n\n\nGiven a class, return the signature string of function \nclass.__init__\n.\n\n\nArgument\n\n\n\n\nclazz\n: \nclass object\n.\n\n\n\n\nReturn\n\n\n\n\nstr\n: A string signature of function \nclass.__init__\n.\n\n\n\n\nExamples\n\n\n# mod.py\nimport sophon\n\nclass foo(object):\n    def __init__(self):\n        pass\n\nclass bar(object):\n    def __init__(self, a, b='b', c=None, **kwargs):\n        pass\n\nprint extract_class_signature(foo)\n# print \nmod.foo()\n to the console\n\nprint extract_class_signature(bar)\n# print \nmod.bar(a, b='b', c=None, **kwargs)\n to the console\n\n\n\n\n\n\n[source]\n\n\ncode_snippet\n\n\nsophon.utils.code_snippet(snippet)\n\n\n\n\nChange a string-typed code snippet into Markdown-style code fence.\n\n\nArgument\n\n\n\n\nsnippet\n: \nstr\n. A code snippet.\n\n\n\n\nReturn\n\n\n\n\nstr\n: Markdown-style code fence.\n\n\n\n\n\n\n[source]\n\n\nimport_from_name\n\n\nsophon.utils.import_from_name(name)\n\n\n\n\nImport module from string.\n\n\nArgument\n\n\n\n\nname\n: \nstr\n. Such as \nfoo\n, \nfoo.someclass\n or \nfoo.somefunction\n.\n\n\n\n\nReturn\n\n\n\n\nmodule\n: It could be module-typed, class-typed or function-typed.\n\n\n\n\n\n\n[source]\n\n\ngenerate_repo_link\n\n\nsophon.utils.generate_repo_link(obj, repo_url, branch)\n\n\n\n\nGet the definition position of obj in source file, then link it to GitHub repo.\n\n\nArguments\n\n\n\n\nobj\n: \nfunction object\n or \nclass object\n.\n\n\nrepo_url\n: \nstr\n. such as \nhttps://github.com/yourusername/yourrepo\n\n\nbranch\n: \nstr\n. repo branch.\n\n\n\n\nReturn\n\n\n\n\nstr\n: Return the hyperlink of obj.\n\n\n\n\n\n\nsophon/build.py\n\n\n[source]\n\n\nbuild_from_yaml\n\n\nsophon.build.build_from_yaml(config_fn)\n\n\n\n\nBuild documentations of python project given the configuration filename.\n\n\nArgument\n\n\n\n\nconfig_fn\n: \nstr\n. Sophon configuration filename.\n\n\n\n\nReturn\n\n\nNone", 
            "title": "API"
        }, 
        {
            "location": "/api/sophon/API/#api-documentations-of-sophon", 
            "text": "This is some API documentations of Sophon.", 
            "title": "API documentations of Sophon"
        }, 
        {
            "location": "/api/sophon/API/#sophonparserspy", 
            "text": "[source]", 
            "title": "sophon/parsers.py"
        }, 
        {
            "location": "/api/sophon/API/#parser", 
            "text": "sophon.parsers.Parser.Parser()  Top level base class of parsers.   [source]", 
            "title": "Parser"
        }, 
        {
            "location": "/api/sophon/API/#restructuredtextparser", 
            "text": "sophon.parsers.ReStructuredTextParser.ReStructuredTextParser()  Support soon.   [source]", 
            "title": "ReStructuredTextParser"
        }, 
        {
            "location": "/api/sophon/API/#googledocparser", 
            "text": "sophon.parsers.GoogleDocParser.GoogleDocParser()  Support soon.   [source]", 
            "title": "GoogleDocParser"
        }, 
        {
            "location": "/api/sophon/API/#numpydocparser", 
            "text": "sophon.parsers.NumPyDocParser.NumPyDocParser()  Support soon.", 
            "title": "NumPyDocParser"
        }, 
        {
            "location": "/api/sophon/API/#sophonparser", 
            "text": "sophon.parsers.SophonParser.SophonParser()  A docstring parser for parsing Sophon style docstring to Markdown.   [source]", 
            "title": "SophonParser"
        }, 
        {
            "location": "/api/sophon/API/#sophonparserparse_from_class", 
            "text": "sophon.parsers.SophonParser.parse_from_class(class_, **kwargs)  Extract docstring from class and parse it to Markdown text.  Arguments   class_ :  class . A class with Sophon style docstring.  **kwargs :  dict .   Return   str : Markdown text.    [source]", 
            "title": "SophonParser.parse_from_class"
        }, 
        {
            "location": "/api/sophon/API/#sophonparserparse_from_class_with_methods", 
            "text": "sophon.parsers.SophonParser.parse_from_class_with_methods(class_, **kwargs)  Extract docstring from class and its public members, and parse it to Markdown text.  Arguments   class_ :  class . A class with Sophon style docstring.  **kwargs :  dict .   Return   str : Markdown text.    [source]", 
            "title": "SophonParser.parse_from_class_with_methods"
        }, 
        {
            "location": "/api/sophon/API/#sophonparserparse_from_docstring", 
            "text": "sophon.parsers.SophonParser.parse_from_docstring(docstring, **kwargs)  Parse Sophon style docstring to Markdown text.  Arguments   docstring :  str . Sophon style docstring.  **kwargs :  dict .   Return   str : Markdown text.    [source]", 
            "title": "SophonParser.parse_from_docstring"
        }, 
        {
            "location": "/api/sophon/API/#sophonparserparse_from_function", 
            "text": "sophon.parsers.SophonParser.parse_from_function(function, **kwargs)  Extract docstring from function and parse it to Markdown text.  Arguments   function :  function . A function with Sophon style docstring.  **kwargs :  dict .   Return   str : Markdown text.", 
            "title": "SophonParser.parse_from_function"
        }, 
        {
            "location": "/api/sophon/API/#sophonutilspy", 
            "text": "[source]", 
            "title": "sophon/utils.py"
        }, 
        {
            "location": "/api/sophon/API/#extract_function_signature", 
            "text": "sophon.utils.extract_function_signature(function, ismethod=False)  Given a function, return the signature string of function.  Arguments   function :  function .  ismethod :  boolean . Represent that if the given function is a method of a class or not.\n    Note that if a \"method\" of class is static, then it is a  function  instead of  method .\n    The simplest way to distinguish  function  and  method  is to see if there is a argument\n    named  self  in the arguments list of the function.   Return   str : A string signature of function.   Examples  Assume that there are some functions in a module named  mod :  # mod.py\nimport sophon\n\ndef foo1():\n    pass\n\ndef foo2(a, b='b', c=None, **kwargs):\n    pass\n\nprint sophon.extract_function_signature(foo1)\n# print  mod.foo1()  to the console\n\nprint sophon.extract_function_signature(foo2)\n# print  mod.foo2(a, b='b', c=None, **kwargs)  to the console  Now we add a class named  bar  to mod.py:  # mod.py\nimport sophon\n\nclass bar(object):\n\n    def baz1(self):\n        pass\n\n    def baz2(self, a, b='b', c=None, **kwargs):\n        pass\n\n    @staticmethod\n    def baz3(a, b='b', c=None):\n        pass\n\n\nprint sophon.extract_function_signature(bar.baz1, ismethod=True)\n# print  mod.bar.baz1()  to the console\n\nprint sophon.extract_function_signature(bar.baz2, ismethod=True)\n# print  mod.bar.baz2(a, b='b', c=None, **kwargs)  to the console\n\nprint sophon.extract_function_signature(bar.baz3, ismethod=False)\n# print  mod.bar.baz3(a, b='b', c=None, **kwargs)  to the console   [source]", 
            "title": "extract_function_signature"
        }, 
        {
            "location": "/api/sophon/API/#extract_class_signature", 
            "text": "sophon.utils.extract_class_signature(clazz)  Given a class, return the signature string of function  class.__init__ .  Argument   clazz :  class object .   Return   str : A string signature of function  class.__init__ .   Examples  # mod.py\nimport sophon\n\nclass foo(object):\n    def __init__(self):\n        pass\n\nclass bar(object):\n    def __init__(self, a, b='b', c=None, **kwargs):\n        pass\n\nprint extract_class_signature(foo)\n# print  mod.foo()  to the console\n\nprint extract_class_signature(bar)\n# print  mod.bar(a, b='b', c=None, **kwargs)  to the console   [source]", 
            "title": "extract_class_signature"
        }, 
        {
            "location": "/api/sophon/API/#code_snippet", 
            "text": "sophon.utils.code_snippet(snippet)  Change a string-typed code snippet into Markdown-style code fence.  Argument   snippet :  str . A code snippet.   Return   str : Markdown-style code fence.    [source]", 
            "title": "code_snippet"
        }, 
        {
            "location": "/api/sophon/API/#import_from_name", 
            "text": "sophon.utils.import_from_name(name)  Import module from string.  Argument   name :  str . Such as  foo ,  foo.someclass  or  foo.somefunction .   Return   module : It could be module-typed, class-typed or function-typed.    [source]", 
            "title": "import_from_name"
        }, 
        {
            "location": "/api/sophon/API/#generate_repo_link", 
            "text": "sophon.utils.generate_repo_link(obj, repo_url, branch)  Get the definition position of obj in source file, then link it to GitHub repo.  Arguments   obj :  function object  or  class object .  repo_url :  str . such as  https://github.com/yourusername/yourrepo  branch :  str . repo branch.   Return   str : Return the hyperlink of obj.", 
            "title": "generate_repo_link"
        }, 
        {
            "location": "/api/sophon/API/#sophonbuildpy", 
            "text": "[source]", 
            "title": "sophon/build.py"
        }, 
        {
            "location": "/api/sophon/API/#build_from_yaml", 
            "text": "sophon.build.build_from_yaml(config_fn)  Build documentations of python project given the configuration filename.  Argument   config_fn :  str . Sophon configuration filename.   Return  None", 
            "title": "build_from_yaml"
        }
    ]
}