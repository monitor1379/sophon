{
    "docs": [
        {
            "location": "/", 
            "text": "Sophon: Automatic API Markdown Documentation Generation for Python\n\n\nWhat is Sophon?\n\n\nBefore I tell you what is Sophon, let me ask you a question: \nAre you ever tired of writing docstrings that look like this?\n\n\ndef dump(obj, filename, encrypt=False):\n    \nDump a object into file.\n    :param obj: A Python object\n    :type obj: any\n    :param filename: Filename of the file to dump\n    :type filename: str\n    :param encrypt: Whether or not to encrypt the file\n    :type encrypt: bool\n    :returns: Whether or not to dump successfully \n    :rtype: bool\n    \n\n    pass\n\n\n\n\nreStructuredText is great, but docstring written in reST creates visually dense, and hard to read.\nCompare the jumble above to the same thing rewritten according to the \nSophon Style Python Docstring\n:\n\n\ndef dump(obj, filename, encrypy=False):\n    \nDump a object into file.\n\n    # Arguments\n        obj: `any`. A Python object.\n        filename: `str`. Filename of the file to dump.\n        encrypt: `bool`. Whether or not to encrypt the file.\n\n    # Return\n        `bool`: Whether or not to dump successfully.\n    \n\n\n\n\n\nUse Sophon to parse the docstring and we get Markdown:\n\n\nspan style=\nfloat:right;\n[[source]](repo/blob/branch/__main__.py#L19)\n/span\n\n\n## dump\n\n```python\ndump(obj, filename, encrypy=False)\n```\n\nDump a object into file.\n\n**Arguments**\n\n- **obj**: `any`. A Python object.\n- **filename**: `str`. Filename of the file to dump.\n- **encrypt**: `bool`. Whether or not to encrypt the file.\n\n**Return**\n\n- **`bool`**: Whether or not to dump successfully.\n\n---\n\n\n\n\nwhich is rendered by MkDocs with theme \nyeti\n:\n\n\n\n\nMuch more legible, no?\n\n\nAs you see, \nSophon is a tool that could \nautomatically generate Markdown-format API documentations\n from Python docstring,\njust like \nEpydoc\n (supports reStructuredText, Javadoc, plaintext)\nand \nNapoleon\n (Sphinx extension that enables Sphinx to parse both NumPy and Google \nstyle docstrings to reStructuredText).\n\n\nSophon is written by \nZhenpeng Deng(monitor1379)\n and licensed under the MIT license.\n\n\nWhy Sophon?\n\n\nFeatures:\n\n\n\n\n\n\nSupport different kinds of docstrings.\n\n    Sophon mainly supports to parse docstring with the following styles and converts them to Markdown: \n\n\n\n\nSophon style docstring\n\n\n(Coming Soon) \nGoogle style\n, the style recommended by \nKhan Academy\n\n\n(Coming Soon) \nNumPy style\n\n\n\n\nSophon also supports to parse every docstring in Python project,\nincluding docstrings on: \nclasses\n, \nmethods\n and \nfunctions\n\n(\nmodules\n, \nattributes\n and \nvariables\n will be supported soon)\n\n\n\n\n\n\nOutput Markdown format documentations.\n\n    Markdown is a way to write contents for the web.\n    Unlike cumbersome word processing applications or other markup languages with complicated syntax,\n    text written in Markdown can be easy to read, easy to write and easily shared for between computers, \n    mobile phones, and people. \n    Though it does not do anything fancy like change the font size, color or type by itself,\n    it has enough stuffs to write an API documentation for your python projects.\n\n\nAnother important reason of choosing Markdown is that there are some remarkable tools for Markdown\nto build beautiful documentations or blogs such as\n\nMkDocs(Project documentation with Markdown)\n or \nHexo(A fast, simple \n powerful blog framework)\n.\n\n\n\n\n\n\nEasily and Highly customizable.\n\n    Sophon uses \nYAML: YAML Ain't Markup Language\n as the format of configuration file.\n    By configuring and providing Markdown template files, you can freely organize your documentation,\n    or open some advanced features such as linking API to source files deposited on GitHub repositories.\n\n\n\n\n\n\nOne-Command build.\n \n    you only need one command to build you API documentation.\n\n\n\n\n\n\nYou can find more details in \nUser Guide/Installation\n or\n\nUser Guide/Getting Started\n.\n\n\nWhat does \"Sophon\" mean?\n\n\nSophon\n is the official translation of \"\n\u667a\u5b50\n\" in \u300aRememberance of Earth's Past II: The Dark Forest\u300b\nwhich is written by the famous Chinese science fiction writer named \nCixin Liu(\u5218\u6148\u6b23)\n.\n\n\nSophon\n is a word amalgamation of \nSophia/sophist/sophisticated\n, meaning \nwisdom\n, \nand \nProton/Electron/Neutron/Photon\n, meaning \nparticle\n,\nconsisting of a supercomputer embedded into a single proton that could fold itself to eleven space dimensions.", 
            "title": "Home"
        }, 
        {
            "location": "/#sophon-automatic-api-markdown-documentation-generation-for-python", 
            "text": "", 
            "title": "Sophon: Automatic API Markdown Documentation Generation for Python"
        }, 
        {
            "location": "/#what-is-sophon", 
            "text": "Before I tell you what is Sophon, let me ask you a question: \nAre you ever tired of writing docstrings that look like this?  def dump(obj, filename, encrypt=False):\n     Dump a object into file.\n    :param obj: A Python object\n    :type obj: any\n    :param filename: Filename of the file to dump\n    :type filename: str\n    :param encrypt: Whether or not to encrypt the file\n    :type encrypt: bool\n    :returns: Whether or not to dump successfully \n    :rtype: bool\n     \n    pass  reStructuredText is great, but docstring written in reST creates visually dense, and hard to read.\nCompare the jumble above to the same thing rewritten according to the  Sophon Style Python Docstring :  def dump(obj, filename, encrypy=False):\n     Dump a object into file.\n\n    # Arguments\n        obj: `any`. A Python object.\n        filename: `str`. Filename of the file to dump.\n        encrypt: `bool`. Whether or not to encrypt the file.\n\n    # Return\n        `bool`: Whether or not to dump successfully.\n       Use Sophon to parse the docstring and we get Markdown:  span style= float:right; [[source]](repo/blob/branch/__main__.py#L19) /span \n\n## dump\n\n```python\ndump(obj, filename, encrypy=False)\n```\n\nDump a object into file.\n\n**Arguments**\n\n- **obj**: `any`. A Python object.\n- **filename**: `str`. Filename of the file to dump.\n- **encrypt**: `bool`. Whether or not to encrypt the file.\n\n**Return**\n\n- **`bool`**: Whether or not to dump successfully.\n\n---  which is rendered by MkDocs with theme  yeti :   Much more legible, no?  As you see, \nSophon is a tool that could  automatically generate Markdown-format API documentations  from Python docstring,\njust like  Epydoc  (supports reStructuredText, Javadoc, plaintext)\nand  Napoleon  (Sphinx extension that enables Sphinx to parse both NumPy and Google \nstyle docstrings to reStructuredText).  Sophon is written by  Zhenpeng Deng(monitor1379)  and licensed under the MIT license.", 
            "title": "What is Sophon?"
        }, 
        {
            "location": "/#why-sophon", 
            "text": "Features:    Support different kinds of docstrings. \n    Sophon mainly supports to parse docstring with the following styles and converts them to Markdown:    Sophon style docstring  (Coming Soon)  Google style , the style recommended by  Khan Academy  (Coming Soon)  NumPy style   Sophon also supports to parse every docstring in Python project,\nincluding docstrings on:  classes ,  methods  and  functions \n( modules ,  attributes  and  variables  will be supported soon)    Output Markdown format documentations. \n    Markdown is a way to write contents for the web.\n    Unlike cumbersome word processing applications or other markup languages with complicated syntax,\n    text written in Markdown can be easy to read, easy to write and easily shared for between computers, \n    mobile phones, and people. \n    Though it does not do anything fancy like change the font size, color or type by itself,\n    it has enough stuffs to write an API documentation for your python projects.  Another important reason of choosing Markdown is that there are some remarkable tools for Markdown\nto build beautiful documentations or blogs such as MkDocs(Project documentation with Markdown)  or  Hexo(A fast, simple   powerful blog framework) .    Easily and Highly customizable. \n    Sophon uses  YAML: YAML Ain't Markup Language  as the format of configuration file.\n    By configuring and providing Markdown template files, you can freely organize your documentation,\n    or open some advanced features such as linking API to source files deposited on GitHub repositories.    One-Command build.  \n    you only need one command to build you API documentation.    You can find more details in  User Guide/Installation  or User Guide/Getting Started .", 
            "title": "Why Sophon?"
        }, 
        {
            "location": "/#what-does-sophon-mean", 
            "text": "Sophon  is the official translation of \" \u667a\u5b50 \" in \u300aRememberance of Earth's Past II: The Dark Forest\u300b\nwhich is written by the famous Chinese science fiction writer named  Cixin Liu(\u5218\u6148\u6b23) .  Sophon  is a word amalgamation of  Sophia/sophist/sophisticated , meaning  wisdom , \nand  Proton/Electron/Neutron/Photon , meaning  particle ,\nconsisting of a supercomputer embedded into a single proton that could fold itself to eleven space dimensions.", 
            "title": "What does \"Sophon\" mean?"
        }, 
        {
            "location": "/user_guide/installation/", 
            "text": "Installation\n\n\nDownload Sophon from GitHub:\n\n\n$ git clone git@github.com:monitor1379/sophon.git\n\n\n\n\nInstall Sophon using \npip\n:\n\n\n$ cd sophon\n$ pip install .", 
            "title": "Installation"
        }, 
        {
            "location": "/user_guide/installation/#installation", 
            "text": "Download Sophon from GitHub:  $ git clone git@github.com:monitor1379/sophon.git  Install Sophon using  pip :  $ cd sophon\n$ pip install .", 
            "title": "Installation"
        }, 
        {
            "location": "/user_guide/getting_started/", 
            "text": "Getting started\n\n\n1. Write docstring\n\n\nNow let's create your first API documentation. \n\n\nAssuming the path of your Python module is \nE://myproject//mycode.py\n,\nand the code is:\n\n\ndef hello_world(message):\n    \nSpeak a message.\n\n    Speak a message to the world.\n\n    # Argument\n        message: `str`. The message you want to speak.\n\n    # Return\n        `None`.\n    \n\n    pass\n\n\n\n\n2. Create configuration file\n\n\nGetting started is super easy.\n\n\n$ pwd\nE://myproject\n\n$ sophon new\n[2016-11-25 09:44:48,809][INFO]: Creating Sophon configuration file: sophon.yml...\n[2016-11-25 09:44:48,812][INFO]: Create done!\n\n\n\n\n1 seconds latter the configuration file \nE://myproject//sophon.yml\n has been created for you.\n\n\nsophon.yml\n is the only configuration file, \nit decides which documentation of classes or functions will be generated and inserted to where.\nNote that the \nsophon.yml\n is not necessary to be in the same directory as \nmycode.py\n.\n\n\nOpen the \nsophon.yml\n, edit it:\n\n\ncode_dir: .\nbuild_dir: api\npages:\n- page: API_of_mycode.md\n  tags:\n  - tag: \n    functions:\n    - mycode.hello_world\n\n\n\n\n\n\n\n\ncode_dir\n means the path of your Python project, \nthis path will be add to the \nsys.path\n by Sophon so Sophon can \nimport\n it.\nNote that it can be absolute path(such as \nE://myproject\n) or relative path(such as \n.\n) to \nsophon.yml\n.\n\n\n\n\n\n\nbuild_dir\n means the directory of output documentations,\nevery Markdown file of page is built in here, such as \nE://myproject//api//API_of_mycode.md\n.\nNote that it can be absolute path or relative path to \nsophon.yml\n.\n\n\n\n\n\n\npages\n includes a list of \npage\n, each \npage\n means the relative path of a Markdown file to \nbuild_dir\n.\n\n\n\n\n\n\n3. Build Documentation\n\n\nUse the following command to build documentation.\n\n\n$ sophon build\n\n\n\n\nIf current path is not in the same directory as \nsophon.yml\n,\nthen you must specify it in the command.\n\n\n$ pwd\nD://somewhere\n\n$ sophon build -f E://myproject//sophon.yml\n\n\n\n\nIf there are no ERROR in the log, then it is built successfully.\n\n\n[2016-11-26 09:22:33,447][INFO]: Specify config_file:sophon.yml\n[2016-11-26 09:22:33,448][INFO]: Loading configuration file: E:\\myproject\\sophon.yml\n[2016-11-26 09:22:33,453][INFO]: Using repo_url: None\n[2016-11-26 09:22:33,454][INFO]: Using branch: master\n[2016-11-26 09:22:33,456][INFO]: Using code dir: E:\\myproject\n[2016-11-26 09:22:33,457][INFO]: Using template dir: None\n[2016-11-26 09:22:33,457][INFO]: Using build dir: E:\\myproject\\api\n[2016-11-26 09:22:33,459][INFO]: Creating build_dir...\n[2016-11-26 09:22:33,461][INFO]: Create done\n[2016-11-26 09:22:33,463][INFO]: ===========================\n[2016-11-26 09:22:33,463][INFO]: Building file: API_of_mycode.md\n[2016-11-26 09:22:33,464][INFO]: Using template file: None\n[2016-11-26 09:22:33,464][INFO]: No template to load\n[2016-11-26 09:22:33,466][INFO]: Creating page...\n[2016-11-26 09:22:33,467][INFO]: Create done\n[2016-11-26 09:22:33,469][INFO]: -------------------------\n[2016-11-26 09:22:33,470][INFO]: Current tag: None\n[2016-11-26 09:22:33,473][INFO]: generateing doc...\n[2016-11-26 09:22:33,477][WARNING]: API_of_mycode.md has a tag without name. markdown doc will append to the file.\n[2016-11-26 09:22:33,480][INFO]: Writing doc to page...\n[2016-11-26 09:22:33,483][INFO]: Write done\n\n\n\n\nOpen \nE://myproject//api//API_of_mycode.md\n and you will see:\n\n\n## hello_world\n\n```python\nmycode.hello_world(message)\n```\n\nSpeak a message.\n\nSpeak a message to the world.\n\n**Argument**\n\n- **message**: `str`. The message you want to speak.\n\n**Return**\n\n`None`.\n\n---\n\n\n\nEasy, right?\n\n\nNow let's add a Python Class \nPerson\n to \nmycode.py\n:\n\n\nclass Person(object):\n    \nThis is a class of Person.\n\n    # Arguments\n        name: `str`. The name of the Person instance.\n        age: `int`. Defaults to 18. The age of the Person instance.\n\n    # Examples\n        You could create a Person instance in this way:\n        ```python\n        batman = Person('Bruce Wayne')\n        elder = Person('you-know-who', 99)\n        ```\n    \n\n\n    def __init__(self, name, age=18):\n        self.name = name\n        self.age = age\n        self.sex = 'male'\n\n    def speak(self, message):\n        \nSpeak something.\n\n        # Argument:\n            message: `str`. Something to speak.\n\n        # Return:\n            `None`.\n        \n\n        print('[{}]: {}'.format(self.name, message))\n\n\n\n\nEdit \nsophon.yml\n:\n\n\ncode_dir: .\nbuild_dir: api\npages:\n- page: API_of_mycode.md\n  tags:\n  - tag:\n    functions:\n    - mycode.hello_world\n    classes:\n    - mycode.Person\n\n\n\n\nRun \nsophon build\n again, and you will see there is a new description of \nPerson\n in \nAPI_of_mycode.md\n,\nBut it doesn't include the description of \nPerson.speak\n.\n\n\nSo continuously edit \nsophon.yml\n:\n\n\ncode_dir: .\nbuild_dir: api\npages:\n- page: API_of_mycode.md\n  tags:\n  - tag:\n    functions:\n    - mycode.hello_world\n    classes_with_methods:\n    - mycode.Person\n\n\n\n\nNow you can see the documentations of both \nPerson\n and \nPerson.speak\n.\n\n\n4. Use templates\n\n\nIn Sophon, template file is also Markdown file, but it includes \ntags\n,\nSuch as \n{{tag_name}}\n.\n\n\nTags are like placeholders, they are used to replaced by the generated Markdown text.\nEach tag has a tag name, which is named in \nsophon.yml\n.\nIf use templates, then you must specify a \ntemplate_dir\n:\n\n\ncode_dir: .\ntemplate_dir: temp\nbuild_dir: api\npages:\n- page: API_of_mycode.md\n  template: API_of_mycode.md\n  tags:\n  - tag: tag0\n    functions:\n    - mycode.hello_world\n\n\n\n\nIn this case, template file \nE://myproject//temp//API_of_mycode.md\n is the template file \nof documentation \nE://myproject//api//API_of_mycode.md\n.\nThis template file has a tag named \ntag0\n:\n\n\n# This is My First Documentation\n\n{{tag0}}\n\nTemplate file can include many tags.\n\n\n\n\nAfter running \nsophon build\n, \nE://myproject//api//API_of_mycode.md\n will become this:\n\n\n# This is My First Documentation\n\n## hello_world\n\n```python\nmycode.hello_world(message)\n```\n\nSpeak a message.\n\nSpeak a message to the world.\n\n**Argument**\n\n- **message**: `str`. The message you want to speak.\n\n**Return**\n\n`None`.\n\n---\n\n\n\nTemplate file can include many tags.\n\n\n\n\nNote that:\n\n\n\n\nif a tag don't have a name, then its Markdown text will append to the tail.\n\n\nif template Markdown file has a tag which is not specified in \nsophon.yml\n, Sophon will do nothing to it.\n\n\n\n\n5. More details\n\n\nMore details of configuration can see \nUser Guide/Configuration\n.\n\n\nMore details of docstring can see \nUser Guide/Sophon Style Python docstrings\n.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/user_guide/getting_started/#getting-started", 
            "text": "", 
            "title": "Getting started"
        }, 
        {
            "location": "/user_guide/getting_started/#1-write-docstring", 
            "text": "Now let's create your first API documentation.   Assuming the path of your Python module is  E://myproject//mycode.py ,\nand the code is:  def hello_world(message):\n     Speak a message.\n\n    Speak a message to the world.\n\n    # Argument\n        message: `str`. The message you want to speak.\n\n    # Return\n        `None`.\n     \n    pass", 
            "title": "1. Write docstring"
        }, 
        {
            "location": "/user_guide/getting_started/#2-create-configuration-file", 
            "text": "Getting started is super easy.  $ pwd\nE://myproject\n\n$ sophon new\n[2016-11-25 09:44:48,809][INFO]: Creating Sophon configuration file: sophon.yml...\n[2016-11-25 09:44:48,812][INFO]: Create done!  1 seconds latter the configuration file  E://myproject//sophon.yml  has been created for you.  sophon.yml  is the only configuration file, \nit decides which documentation of classes or functions will be generated and inserted to where.\nNote that the  sophon.yml  is not necessary to be in the same directory as  mycode.py .  Open the  sophon.yml , edit it:  code_dir: .\nbuild_dir: api\npages:\n- page: API_of_mycode.md\n  tags:\n  - tag: \n    functions:\n    - mycode.hello_world    code_dir  means the path of your Python project, \nthis path will be add to the  sys.path  by Sophon so Sophon can  import  it.\nNote that it can be absolute path(such as  E://myproject ) or relative path(such as  . ) to  sophon.yml .    build_dir  means the directory of output documentations,\nevery Markdown file of page is built in here, such as  E://myproject//api//API_of_mycode.md .\nNote that it can be absolute path or relative path to  sophon.yml .    pages  includes a list of  page , each  page  means the relative path of a Markdown file to  build_dir .", 
            "title": "2. Create configuration file"
        }, 
        {
            "location": "/user_guide/getting_started/#3-build-documentation", 
            "text": "Use the following command to build documentation.  $ sophon build  If current path is not in the same directory as  sophon.yml ,\nthen you must specify it in the command.  $ pwd\nD://somewhere\n\n$ sophon build -f E://myproject//sophon.yml  If there are no ERROR in the log, then it is built successfully.  [2016-11-26 09:22:33,447][INFO]: Specify config_file:sophon.yml\n[2016-11-26 09:22:33,448][INFO]: Loading configuration file: E:\\myproject\\sophon.yml\n[2016-11-26 09:22:33,453][INFO]: Using repo_url: None\n[2016-11-26 09:22:33,454][INFO]: Using branch: master\n[2016-11-26 09:22:33,456][INFO]: Using code dir: E:\\myproject\n[2016-11-26 09:22:33,457][INFO]: Using template dir: None\n[2016-11-26 09:22:33,457][INFO]: Using build dir: E:\\myproject\\api\n[2016-11-26 09:22:33,459][INFO]: Creating build_dir...\n[2016-11-26 09:22:33,461][INFO]: Create done\n[2016-11-26 09:22:33,463][INFO]: ===========================\n[2016-11-26 09:22:33,463][INFO]: Building file: API_of_mycode.md\n[2016-11-26 09:22:33,464][INFO]: Using template file: None\n[2016-11-26 09:22:33,464][INFO]: No template to load\n[2016-11-26 09:22:33,466][INFO]: Creating page...\n[2016-11-26 09:22:33,467][INFO]: Create done\n[2016-11-26 09:22:33,469][INFO]: -------------------------\n[2016-11-26 09:22:33,470][INFO]: Current tag: None\n[2016-11-26 09:22:33,473][INFO]: generateing doc...\n[2016-11-26 09:22:33,477][WARNING]: API_of_mycode.md has a tag without name. markdown doc will append to the file.\n[2016-11-26 09:22:33,480][INFO]: Writing doc to page...\n[2016-11-26 09:22:33,483][INFO]: Write done  Open  E://myproject//api//API_of_mycode.md  and you will see:  ## hello_world\n\n```python\nmycode.hello_world(message)\n```\n\nSpeak a message.\n\nSpeak a message to the world.\n\n**Argument**\n\n- **message**: `str`. The message you want to speak.\n\n**Return**\n\n`None`.\n\n---  Easy, right?  Now let's add a Python Class  Person  to  mycode.py :  class Person(object):\n     This is a class of Person.\n\n    # Arguments\n        name: `str`. The name of the Person instance.\n        age: `int`. Defaults to 18. The age of the Person instance.\n\n    # Examples\n        You could create a Person instance in this way:\n        ```python\n        batman = Person('Bruce Wayne')\n        elder = Person('you-know-who', 99)\n        ```\n     \n\n    def __init__(self, name, age=18):\n        self.name = name\n        self.age = age\n        self.sex = 'male'\n\n    def speak(self, message):\n         Speak something.\n\n        # Argument:\n            message: `str`. Something to speak.\n\n        # Return:\n            `None`.\n         \n        print('[{}]: {}'.format(self.name, message))  Edit  sophon.yml :  code_dir: .\nbuild_dir: api\npages:\n- page: API_of_mycode.md\n  tags:\n  - tag:\n    functions:\n    - mycode.hello_world\n    classes:\n    - mycode.Person  Run  sophon build  again, and you will see there is a new description of  Person  in  API_of_mycode.md ,\nBut it doesn't include the description of  Person.speak .  So continuously edit  sophon.yml :  code_dir: .\nbuild_dir: api\npages:\n- page: API_of_mycode.md\n  tags:\n  - tag:\n    functions:\n    - mycode.hello_world\n    classes_with_methods:\n    - mycode.Person  Now you can see the documentations of both  Person  and  Person.speak .", 
            "title": "3. Build Documentation"
        }, 
        {
            "location": "/user_guide/getting_started/#4-use-templates", 
            "text": "In Sophon, template file is also Markdown file, but it includes  tags ,\nSuch as  {{tag_name}} .  Tags are like placeholders, they are used to replaced by the generated Markdown text.\nEach tag has a tag name, which is named in  sophon.yml .\nIf use templates, then you must specify a  template_dir :  code_dir: .\ntemplate_dir: temp\nbuild_dir: api\npages:\n- page: API_of_mycode.md\n  template: API_of_mycode.md\n  tags:\n  - tag: tag0\n    functions:\n    - mycode.hello_world  In this case, template file  E://myproject//temp//API_of_mycode.md  is the template file \nof documentation  E://myproject//api//API_of_mycode.md .\nThis template file has a tag named  tag0 :  # This is My First Documentation\n\n{{tag0}}\n\nTemplate file can include many tags.  After running  sophon build ,  E://myproject//api//API_of_mycode.md  will become this:  # This is My First Documentation\n\n## hello_world\n\n```python\nmycode.hello_world(message)\n```\n\nSpeak a message.\n\nSpeak a message to the world.\n\n**Argument**\n\n- **message**: `str`. The message you want to speak.\n\n**Return**\n\n`None`.\n\n---\n\n\n\nTemplate file can include many tags.  Note that:   if a tag don't have a name, then its Markdown text will append to the tail.  if template Markdown file has a tag which is not specified in  sophon.yml , Sophon will do nothing to it.", 
            "title": "4. Use templates"
        }, 
        {
            "location": "/user_guide/getting_started/#5-more-details", 
            "text": "More details of configuration can see  User Guide/Configuration .  More details of docstring can see  User Guide/Sophon Style Python docstrings .", 
            "title": "5. More details"
        }, 
        {
            "location": "/user_guide/sophon_style_python_docstrings/", 
            "text": "Sophon Style Python Docstrings\n\n\n\n\nSee also\n\n\n\n\n\n\nExample Google Style Python Docstrings\n\n\n\n\n\n\nExample NumPy Style Python Docstrings\n\n\n\n\n\n\n\n\nThis is a module named \nexample.py\n, which represents\nhow to write the docstrings of \nmodule\n, \nfunction\n, \nclass\n and \nmethod\n.\n\n\n# -*- coding: utf-8 -*-\n\nShort description of module.\n\nLong description of module.\nCan be multiline.\n\n\n\ndef example_create(name, age=0, sex='male', **kwargs):\n    \nShort description of function.\n\n    Long description of function.\n    Can be multiline too.\n\n    # Arguments\n        name: `any`. Description of name.\n        age: `int`. Description of age. Defaults to zero.\n            If it is multiline then must indent the following lines.\n        sex: `str`. Description of sex. Defaults to 'male'.\n        **kwargs: `dict`.\n\n    # Return\n        `Person`: an instance object of `Person` class with given information.\n\n    # Note\n        Here is note.\n\n    # Examples\n        Here is examples.\n        ```\n        jzm = example_create('jzm')\n        batman = example_create('Bruce Wayne', 28, 'male')\n        ```\n\n    \n\n    pass\n\n\nClass Person(object):\n    \nShort description of class.\n\n    Long description of class.\n    Can be multiline too.\n\n    # Arguments\n        name: `any`. Description of name.\n        age: `int`. Description of age. Defaults to zero.\n            If it is multiline then must indent the following lines.\n        sex: `str`. Description of sex. Defaults to 'male'.\n        **kwargs: `dict`.\n\n    # Note\n        Here is note.\n\n    # Examples\n        Here is examples.\n        ```\n        jzm = Person('jzm')\n        batman = Person('Bruce Wayne', 28, 'male')\n        ```\n\n    \n\n\n    def __init__(self, name, age=0, sex='male', **kwargs):\n        pass\n\n    def speak(self, message):\n        \nShort description of method.\n\n        Long description of method.\n        Can be multiline too.\n\n        # Arguments\n            message: `str`. Description of message.\n\n        # Return\n            `None`.\n\n        # Note\n            Here is note.\n\n        # Examples\n            Here is examples.\n            ```\n            batman = example_create('Bruce Wayne', 28, 'male')\n            batman.speak('I am batman!')\n            ```\n        \n\n        pass", 
            "title": "Sophon Style Python Docstrings"
        }, 
        {
            "location": "/user_guide/sophon_style_python_docstrings/#sophon-style-python-docstrings", 
            "text": "See also    Example Google Style Python Docstrings    Example NumPy Style Python Docstrings     This is a module named  example.py , which represents\nhow to write the docstrings of  module ,  function ,  class  and  method .  # -*- coding: utf-8 -*- Short description of module.\n\nLong description of module.\nCan be multiline. \n\ndef example_create(name, age=0, sex='male', **kwargs):\n     Short description of function.\n\n    Long description of function.\n    Can be multiline too.\n\n    # Arguments\n        name: `any`. Description of name.\n        age: `int`. Description of age. Defaults to zero.\n            If it is multiline then must indent the following lines.\n        sex: `str`. Description of sex. Defaults to 'male'.\n        **kwargs: `dict`.\n\n    # Return\n        `Person`: an instance object of `Person` class with given information.\n\n    # Note\n        Here is note.\n\n    # Examples\n        Here is examples.\n        ```\n        jzm = example_create('jzm')\n        batman = example_create('Bruce Wayne', 28, 'male')\n        ```\n\n     \n    pass\n\n\nClass Person(object):\n     Short description of class.\n\n    Long description of class.\n    Can be multiline too.\n\n    # Arguments\n        name: `any`. Description of name.\n        age: `int`. Description of age. Defaults to zero.\n            If it is multiline then must indent the following lines.\n        sex: `str`. Description of sex. Defaults to 'male'.\n        **kwargs: `dict`.\n\n    # Note\n        Here is note.\n\n    # Examples\n        Here is examples.\n        ```\n        jzm = Person('jzm')\n        batman = Person('Bruce Wayne', 28, 'male')\n        ```\n\n     \n\n    def __init__(self, name, age=0, sex='male', **kwargs):\n        pass\n\n    def speak(self, message):\n         Short description of method.\n\n        Long description of method.\n        Can be multiline too.\n\n        # Arguments\n            message: `str`. Description of message.\n\n        # Return\n            `None`.\n\n        # Note\n            Here is note.\n\n        # Examples\n            Here is examples.\n            ```\n            batman = example_create('Bruce Wayne', 28, 'male')\n            batman.speak('I am batman!')\n            ```\n         \n        pass", 
            "title": "Sophon Style Python Docstrings"
        }, 
        {
            "location": "/user_guide/configuration/", 
            "text": "Configuration\n\n\nProject information\n\n\nsophon.yml\n must contain following information.\n\n\ncode_dir\n\n\n\u6307\u5b9a\u60a8Python\u9879\u76ee\u6240\u5728\u7684\u6587\u4ef6\u5939\u3002\n\n\n\n\nSophon\u4f1a\u5c06\u8be5\u76ee\u5f55\u63d2\u5165\u5230\nsys.path\n\u4e2d\uff0c\u4ee5\u8ba9Python\u89e3\u6790\u5668\u80fd\u591fimport\u3002\n\n\ncode_dir\n\u652f\u6301\u76f8\u5bf9\u8def\u5f84\u3002\u5982\u679c\u662f\u76f8\u5bf9\u8def\u5f84\u5219\u662f\u76f8\u5bf9\u4e8e\nsophon.yml\n\u800c\u8a00\u3002\n\n\n\u53ef\u4ee5\u4e0d\u6307\u5b9a\ncode_dir\n\uff0c\u9ed8\u8ba4\u4e3a\n.\n\u3002\n\n\n\n\n\n\ntemplate_dir\n\n\n\u5b58\u653eMarkdown\u6a21\u677f\u7684\u6587\u4ef6\u5939\u3002\n\u6a21\u677f\u6587\u4ef6\u5c31\u662fMarkdown\u6587\u4ef6\uff0c\u53ea\u4e0d\u8fd8\u5305\u542b\u4e86\u4e00\u4e9b\u5f62\u5982\n{{tag_name}}\n\u7684\u6807\u8bb0\u3002\u66f4\u591a\u8be6\u7ec6\u7528\u6cd5\u8bf7\u770b\ntags\n\u3002\n\n\n\n\ntemplate_dir\n\u652f\u6301\u76f8\u5bf9\u8def\u5f84\u3002\u5982\u679c\u662f\u76f8\u5bf9\u8def\u5f84\u5219\u662f\u76f8\u5bf9\u4e8e\nsophon.yml\n\u800c\u8a00\u3002\n\n\n\u53ef\u4ee5\u4e0d\u6307\u5b9a\ntemplate_dir\n\uff0c\u9ed8\u8ba4\u4e3a\nNone\n\u3002\n\n\n\u4e0d\u6307\u5b9a\ntemplate_dir\n\u8868\u793a\u4e0d\u4f7f\u7528\u6a21\u677f\u529f\u80fd\uff0c\u6b64\u65f6\u540e\u7eed\u7684\u67d0\u4e2a\u6587\u6863\npage\n\u9879\u5305\u542b\u4e86\ntemplate\n\u9879\uff0c\u5219\u4f1a\u62a5\u9519\u3002\n\n\n\n\n\n\nbuild_dir\n\n\n\u751f\u6210\u7684API\u6587\u6863\u6240\u5b58\u653e\u7684\u6587\u4ef6\u5939\u3002\n\n\n\n\nbuild_dir\n\u652f\u6301\u76f8\u5bf9\u8def\u5f84\u3002\u5982\u679c\u662f\u76f8\u5bf9\u8def\u5f84\u5219\u662f\u76f8\u5bf9\u4e8e\nsophon.yml\n\u800c\u8a00\u3002\n\n\n\u53ef\u4ee5\u4e0d\u6307\u5b9a\nbuild_dir\n\uff0c\u9ed8\u8ba4\u4e3a\n./api\n\uff0c\u5373\u5728\nsophon.yml\n\u6240\u5728\u6587\u4ef6\u5939\u65b0\u5efa\u4e00\u4e2a\u53eb\u505a\napi\n\u7684\u6587\u4ef6\u5939\u6765\u5b58\u653eAPI\u6587\u6863\u3002\n\n\n\n\n\n\nrepo_url\n\n\n\u6307\u5b9a\u5b58\u653e\u4e86\u6e90\u4ee3\u7801\u7684\u4ed3\u5e93\uff0c\u53ef\u4ee5\u5728API\u6587\u6863\u4e2d\u4e3a\u6bcf\u4e2aAPI\u751f\u6210\u4e00\u4e2a\u94fe\u63a5\u5230\u6e90\u4ee3\u7801\u7684\u8d85\u94fe\u63a5\u3002\n\n\n\n\n\u6682\u65f6\u4ec5\u652f\u6301GitHub\u3002\n\n\n\u683c\u5f0f\u4e3a\nhttps://github.com/your_user_name/your_repo\n\u3002\n\n\n\u53ef\u4ee5\u4e0d\u6307\u5b9a\nrepo_url\n\uff0c\u9ed8\u8ba4\u4e3a\nNone\n\u3002\n\n\n\u4e0d\u6307\u5b9a\nrepo_url\n\u8868\u793a\u4e0d\u4f7f\u7528\u8be5\u529f\u80fd\u3002\n\n\n\n\n\n\nbranch\n\n\n\u6307\u5b9a\u6e90\u4ee3\u7801\u4ed3\u5e93\u4e0a\u7684\u5206\u652f\u3002\n\n\n\n\n\u53ef\u4ee5\u4e0d\u6307\u5b9a\nbranch\n\uff0c\u9ed8\u8ba4\u4e3a\nmaster\n\u3002\n\n\n\u5f53\u4e0d\u6307\u5b9a\nrepo_url\n\u65f6\uff0c\nbranch\n\u65e0\u6548\u3002\n\n\n\n\n\n\nstyle\n\n\n\u6307\u5b9a\u60a8Python\u4ee3\u7801\u4e2ddocstring\u6240\u4f7f\u7528\u7684\u98ce\u683c\u3002\n\n\n\n\n\u76ee\u524d\u652f\u6301\nsophon\n(\ngoogle\n, \nnumpy\n\u5373\u5c06\u652f\u6301)\u3002\n\n\n\u53ef\u4ee5\u4e0d\u6307\u5b9a\nstyle\n\uff0c\u9ed8\u8ba4\u4e3a\nsophon\n\u3002\n\n\n\n\n\n\npages\n\n\npages\n\u662f\u4e00\u4e2a\u5305\u542b\u4e860\u4e2a\u6216\u591a\u4e2a\npage\n\u7684\u5217\u8868\uff0c\u5305\u542b\u4e86\u6240\u6709\u8981\u751f\u6210\u7684\u6587\u6863\u3002\u66f4\u591a\u8be6\u7ec6\u7528\u6cd5\u8bf7\u770b\npage\n\u3002\n\n\n\n\n\u53ef\u4ee5\u4e0d\u6307\u5b9a\npages\n\uff0c\u9ed8\u8ba4\u4e3a\nNone\n\u3002\n\n\n\u5f53\u4e0d\u6307\u5b9a\npages\n\u6216\u6307\u5b9a\u4e86\npages\n\u4f46\u662f\u4e0d\u5305\u542b\u4efb\u4f55\npage\n\u65f6\uff0c\u8868\u793a\u4e0d\u751f\u6210\u4efb\u4f55\u6587\u6863\u3002\n\n\n\n\n\n\npage\n\n\npage\n\u8868\u793a\u4e00\u4e2a\u751f\u6210\u7684API Markdown\u6587\u6863\u3002\u683c\u5f0f\u4e3a\uff1a\n\n\n# filename: /home/user/sophon.yml\nbuild_dir: api\ntemplate_dir: templates\n\npages:\n- page: test/aa.md\n  template: bb.md\n- page: cc.md\n  template: test/dd.md\n\n\n\n\n\n\n\u6bcf\u4e2a\npage\n\u5fc5\u987b\u6307\u5b9a\u6587\u4ef6\u8def\u5f84\u540d\uff0c\u8be5\u6587\u4ef6\u8def\u5f84\u540d\u5fc5\u987b\u662f\u76f8\u5bf9\u8def\u5f84\uff0c\u4e14\u662f\u76f8\u5bf9\u4e8e\nbuild_dir\n\u800c\u8a00\u3002\n\n\n\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0cSophon\u4f1a\u6309\u987a\u5e8f\uff1a\n\n\n\u751f\u6210\u8def\u5f84\u540d\u4e3a\n/home/user/api/test/aa.md\n\u7684API\u6587\u6863\uff0c\n\u6240\u4f7f\u7528\u7684\u6a21\u677f\u6587\u4ef6\u4e3a\n/home/user/templates/bb.md\n\u3002\n\n\n\u751f\u6210\u8def\u5f84\u540d\u4e3a\n/home/user/api/cc.md\n\u7684API\u6587\u6863\uff0c\n\u6240\u4f7f\u7528\u7684\u6a21\u677f\u6587\u4ef6\u4e3a\n/home/user/templates/test/dd.md\n\u3002\n\n\n\n\n\n\n\n\n\n\ntags\n\n\ntags\n\u662f\u4e00\u4e2a\u5305\u542b\u4e860\u4e2a\u6216\u591a\u4e2a\ntag\n\u7684\u5217\u8868\uff0c\u4e5f\u662f\npage\n\u7684\u6210\u5458\u3002\u66f4\u591a\u8be6\u7ec6\u7528\u6cd5\u8bf7\u770b\ntag\n\u3002\n\n\n\n\n\u53ef\u4ee5\u4e0d\u6307\u5b9a\ntags\n\uff0c\u9ed8\u8ba4\u4e3a\nNone\n\u3002\n\n\n\u5f53\u4e0d\u6307\u5b9a\ntags\n\u6216\u6307\u5b9a\u4e86\ntags\n\u4f46\u662f\u4e0d\u5305\u542b\u4efb\u4f55\ntag\n\u65f6\uff0cSophon\u4e0d\u4f1a\u5411\u8be5\ntags\n\u6240\u5c5e\npage\n\u6587\u4ef6\u4e2d\u751f\u6210\u4efb\u4f55Markdown text\u3002\n\n\n\n\n\n\ntag\n\n\ntag\n\u8868\u793a\u4e00\u4e2a\u6807\u8bb0\uff0c\u901a\u5e38\u7ed3\u5408\u6a21\u677f\u6587\u4ef6\u6765\u4f7f\u7528\uff0c\u8868\u793a\u751f\u6210\u7684API Markdown text\u5e94\u8be5\u63d2\u5165\u5230\u6a21\u677f\u6587\u4ef6\u7684\u54ea\u4e2a\u5730\u65b9\u3002\n\n\n\u4e3e\u4e2a\u4f8b\u5b50,\u5047\u8bbe\u6a21\u677f\u6587\u4ef6\n/home/user/templates/bb.md\n\u5185\u5bb9\u4e3a\uff1a\n\n\n# Hello World\n\n{{tag0}}\n\n## Hello Sophon\n\n{{tag1}}\n\n\n\n\n\u914d\u7f6e\u6587\u4ef6\u4e3a\uff1a\n\n\n# filename: /home/user/sophon.yml\nbuild_dir: api\ntemplate_dir: templates\n\npages:\n- page: test/aa.md\n  template: bb.md\n  tags:\n  - tag: tag0\n    functions:\n    - mod.func\n  - tag: tag1\n    classes:\n    - mod.clazz\n\n\n\n\n\u5219\u8fd0\u884cSophon\u4e4b\u540e\uff1a\n\n\n\n\nSophon\u4f1a\u5148\u8bfb\u53d6\u6a21\u677f\u6587\u4ef6\n/home/user/templates/bb.md\n\u91cc\u7684\u5185\u5bb9\uff1b\n\n\n\u7136\u540e\u5c06\u6807\u8bb0\n{{tag0}}\n\u66ff\u6362\u4e3a\u51fd\u6570\nmod.func\n\u7684API Markdown text\uff1b\n\n\n\u518d\u5c06\u6807\u8bb0\n{{tag1}}\n\u66ff\u6362\u4e3a\u7c7b\nmod.clazz\n\u7684API Markdown text\uff1b\n\n\n\u6700\u540e\u5c06\u5185\u5bb9\u5199\u5165\n/home/user/api/test/aa.md\n\u4e2d\u3002\n\n\n\n\n\u6ce8\u610f\u7684\u662f\uff0c\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\u4e2d\uff0c\u8be5tag\u4e0b\u5305\u542b\u7684\u51fd\u6570\u3001\u7c7b\u7684API Markdown text\u4f1a\u4f9d\u6b21\u6dfb\u52a0\u5728\u6587\u4ef6\u672b\u5c3e\uff0c\u800c\u4e0d\u662f\u66ff\u6362\u6389\u6a21\u677f\u6587\u4ef6\u4e2d\u7684\n{{tag}}\n\uff1a\n\n\n\n\n\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u4e86\u4e00\u4e2atag\uff0c\u4f46\u662f\u6ca1\u6709\u7ed9tag\u540d\u65f6\uff1b\n\n\n\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u4e86\u4e00\u4e2atag\uff0c\u4f46\u662f\u5728\u6a21\u677f\u6587\u4ef6\u4e2d\u4e0d\u5b58\u5728\u8be5tag\u6807\u8bb0\u65f6\uff1b\n\n\n\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u4e86\u4e00\u4e2atag\uff0c\u4f46\u662f\u8be5tag\u6240\u5c5e\u7684\npage\n\u6ca1\u6709\u4f7f\u7528\u6a21\u677f\u6587\u4ef6\u65f6\u3002\n\n\n\n\n\u6bcf\u4e2atag\u6240\u5305\u542b\u7684API\u6309\u7167\u56fa\u5b9a\u987a\u5e8fclasses-\nclasses_with_members-\nfunctions\u4f9d\u6b21\u751f\u6210API Markdown text\u3002\n\n\n\u53e6\u5916\uff0cSophon\u4e0d\u4f1a\u5bf9\u5b58\u5728\u4e8e\u6a21\u677f\u6587\u4ef6\u4f46\u662f\u5374\u6ca1\u6709\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u7684tag\u4f5c\u4efb\u4f55\u5904\u7406\uff0c\u4e5f\u5c31\u662f\u4e00\u5207\u4ee5\u914d\u7f6e\u6587\u4ef6\u4e3a\u51c6\u3002\n\n\n\n\nclasses\n\n\nclasses\n\u662f\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u7c7b\u7684\u5305\u8def\u5f84\u7684\u5217\u8868\u3002\n\n\nSophon\u5728\u751f\u6210\u4e00\u4e2a\u7c7b\u7684API\u6587\u6863\u65f6\uff0c\u53ea\u4f1a\u9009\u62e9\u8be5\u7c7b\u7684docstring\u6765\u751f\u6210\u8be5\u7c7b\u6784\u9020\u51fd\u6570\u7684API Markdown text\uff0c\n\u5e76\u4e0d\u5305\u62ec\u8be5\u7c7b\u7684\u6210\u5458\u51fd\u6570\u4e0e\u65b9\u6cd5\u3002\n\n\n\n\nclasses_with_methods\n\n\nclasses_with_methods\n\u662f\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u51fd\u6570\u7684\u5305\u8def\u5f84\u7684\u5217\u8868\u3002\n\n\nSophon\u5728\u751f\u6210\u4e00\u4e2a\u7c7b\u7684API\u6587\u6863\u65f6\uff0c\u4f1a\u751f\u6210\u5305\u62ec\u6784\u9020\u51fd\u6570\u5728\u5185\u7684\u8be5\u7c7b\u6240\u6709\u516c\u6709\u6210\u5458\u51fd\u6570\u4e0e\u65b9\u6cd5\u7684API Markdown text\u3002\n\n\n\n\nfunctions\n\n\nfunctions\n\u662f\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u51fd\u6570\u7684\u5305\u8def\u5f84\u7684\u5217\u8868\u3002", 
            "title": "Configuration"
        }, 
        {
            "location": "/user_guide/configuration/#configuration", 
            "text": "", 
            "title": "Configuration"
        }, 
        {
            "location": "/user_guide/configuration/#project-information", 
            "text": "sophon.yml  must contain following information.", 
            "title": "Project information"
        }, 
        {
            "location": "/user_guide/configuration/#code_dir", 
            "text": "\u6307\u5b9a\u60a8Python\u9879\u76ee\u6240\u5728\u7684\u6587\u4ef6\u5939\u3002   Sophon\u4f1a\u5c06\u8be5\u76ee\u5f55\u63d2\u5165\u5230 sys.path \u4e2d\uff0c\u4ee5\u8ba9Python\u89e3\u6790\u5668\u80fd\u591fimport\u3002  code_dir \u652f\u6301\u76f8\u5bf9\u8def\u5f84\u3002\u5982\u679c\u662f\u76f8\u5bf9\u8def\u5f84\u5219\u662f\u76f8\u5bf9\u4e8e sophon.yml \u800c\u8a00\u3002  \u53ef\u4ee5\u4e0d\u6307\u5b9a code_dir \uff0c\u9ed8\u8ba4\u4e3a . \u3002", 
            "title": "code_dir"
        }, 
        {
            "location": "/user_guide/configuration/#template_dir", 
            "text": "\u5b58\u653eMarkdown\u6a21\u677f\u7684\u6587\u4ef6\u5939\u3002\n\u6a21\u677f\u6587\u4ef6\u5c31\u662fMarkdown\u6587\u4ef6\uff0c\u53ea\u4e0d\u8fd8\u5305\u542b\u4e86\u4e00\u4e9b\u5f62\u5982 {{tag_name}} \u7684\u6807\u8bb0\u3002\u66f4\u591a\u8be6\u7ec6\u7528\u6cd5\u8bf7\u770b tags \u3002   template_dir \u652f\u6301\u76f8\u5bf9\u8def\u5f84\u3002\u5982\u679c\u662f\u76f8\u5bf9\u8def\u5f84\u5219\u662f\u76f8\u5bf9\u4e8e sophon.yml \u800c\u8a00\u3002  \u53ef\u4ee5\u4e0d\u6307\u5b9a template_dir \uff0c\u9ed8\u8ba4\u4e3a None \u3002  \u4e0d\u6307\u5b9a template_dir \u8868\u793a\u4e0d\u4f7f\u7528\u6a21\u677f\u529f\u80fd\uff0c\u6b64\u65f6\u540e\u7eed\u7684\u67d0\u4e2a\u6587\u6863 page \u9879\u5305\u542b\u4e86 template \u9879\uff0c\u5219\u4f1a\u62a5\u9519\u3002", 
            "title": "template_dir"
        }, 
        {
            "location": "/user_guide/configuration/#build_dir", 
            "text": "\u751f\u6210\u7684API\u6587\u6863\u6240\u5b58\u653e\u7684\u6587\u4ef6\u5939\u3002   build_dir \u652f\u6301\u76f8\u5bf9\u8def\u5f84\u3002\u5982\u679c\u662f\u76f8\u5bf9\u8def\u5f84\u5219\u662f\u76f8\u5bf9\u4e8e sophon.yml \u800c\u8a00\u3002  \u53ef\u4ee5\u4e0d\u6307\u5b9a build_dir \uff0c\u9ed8\u8ba4\u4e3a ./api \uff0c\u5373\u5728 sophon.yml \u6240\u5728\u6587\u4ef6\u5939\u65b0\u5efa\u4e00\u4e2a\u53eb\u505a api \u7684\u6587\u4ef6\u5939\u6765\u5b58\u653eAPI\u6587\u6863\u3002", 
            "title": "build_dir"
        }, 
        {
            "location": "/user_guide/configuration/#repo_url", 
            "text": "\u6307\u5b9a\u5b58\u653e\u4e86\u6e90\u4ee3\u7801\u7684\u4ed3\u5e93\uff0c\u53ef\u4ee5\u5728API\u6587\u6863\u4e2d\u4e3a\u6bcf\u4e2aAPI\u751f\u6210\u4e00\u4e2a\u94fe\u63a5\u5230\u6e90\u4ee3\u7801\u7684\u8d85\u94fe\u63a5\u3002   \u6682\u65f6\u4ec5\u652f\u6301GitHub\u3002  \u683c\u5f0f\u4e3a https://github.com/your_user_name/your_repo \u3002  \u53ef\u4ee5\u4e0d\u6307\u5b9a repo_url \uff0c\u9ed8\u8ba4\u4e3a None \u3002  \u4e0d\u6307\u5b9a repo_url \u8868\u793a\u4e0d\u4f7f\u7528\u8be5\u529f\u80fd\u3002", 
            "title": "repo_url"
        }, 
        {
            "location": "/user_guide/configuration/#branch", 
            "text": "\u6307\u5b9a\u6e90\u4ee3\u7801\u4ed3\u5e93\u4e0a\u7684\u5206\u652f\u3002   \u53ef\u4ee5\u4e0d\u6307\u5b9a branch \uff0c\u9ed8\u8ba4\u4e3a master \u3002  \u5f53\u4e0d\u6307\u5b9a repo_url \u65f6\uff0c branch \u65e0\u6548\u3002", 
            "title": "branch"
        }, 
        {
            "location": "/user_guide/configuration/#style", 
            "text": "\u6307\u5b9a\u60a8Python\u4ee3\u7801\u4e2ddocstring\u6240\u4f7f\u7528\u7684\u98ce\u683c\u3002   \u76ee\u524d\u652f\u6301 sophon ( google ,  numpy \u5373\u5c06\u652f\u6301)\u3002  \u53ef\u4ee5\u4e0d\u6307\u5b9a style \uff0c\u9ed8\u8ba4\u4e3a sophon \u3002", 
            "title": "style"
        }, 
        {
            "location": "/user_guide/configuration/#pages", 
            "text": "pages \u662f\u4e00\u4e2a\u5305\u542b\u4e860\u4e2a\u6216\u591a\u4e2a page \u7684\u5217\u8868\uff0c\u5305\u542b\u4e86\u6240\u6709\u8981\u751f\u6210\u7684\u6587\u6863\u3002\u66f4\u591a\u8be6\u7ec6\u7528\u6cd5\u8bf7\u770b page \u3002   \u53ef\u4ee5\u4e0d\u6307\u5b9a pages \uff0c\u9ed8\u8ba4\u4e3a None \u3002  \u5f53\u4e0d\u6307\u5b9a pages \u6216\u6307\u5b9a\u4e86 pages \u4f46\u662f\u4e0d\u5305\u542b\u4efb\u4f55 page \u65f6\uff0c\u8868\u793a\u4e0d\u751f\u6210\u4efb\u4f55\u6587\u6863\u3002", 
            "title": "pages"
        }, 
        {
            "location": "/user_guide/configuration/#page", 
            "text": "page \u8868\u793a\u4e00\u4e2a\u751f\u6210\u7684API Markdown\u6587\u6863\u3002\u683c\u5f0f\u4e3a\uff1a  # filename: /home/user/sophon.yml\nbuild_dir: api\ntemplate_dir: templates\n\npages:\n- page: test/aa.md\n  template: bb.md\n- page: cc.md\n  template: test/dd.md   \u6bcf\u4e2a page \u5fc5\u987b\u6307\u5b9a\u6587\u4ef6\u8def\u5f84\u540d\uff0c\u8be5\u6587\u4ef6\u8def\u5f84\u540d\u5fc5\u987b\u662f\u76f8\u5bf9\u8def\u5f84\uff0c\u4e14\u662f\u76f8\u5bf9\u4e8e build_dir \u800c\u8a00\u3002  \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0cSophon\u4f1a\u6309\u987a\u5e8f\uff1a  \u751f\u6210\u8def\u5f84\u540d\u4e3a /home/user/api/test/aa.md \u7684API\u6587\u6863\uff0c\n\u6240\u4f7f\u7528\u7684\u6a21\u677f\u6587\u4ef6\u4e3a /home/user/templates/bb.md \u3002  \u751f\u6210\u8def\u5f84\u540d\u4e3a /home/user/api/cc.md \u7684API\u6587\u6863\uff0c\n\u6240\u4f7f\u7528\u7684\u6a21\u677f\u6587\u4ef6\u4e3a /home/user/templates/test/dd.md \u3002", 
            "title": "page"
        }, 
        {
            "location": "/user_guide/configuration/#tags", 
            "text": "tags \u662f\u4e00\u4e2a\u5305\u542b\u4e860\u4e2a\u6216\u591a\u4e2a tag \u7684\u5217\u8868\uff0c\u4e5f\u662f page \u7684\u6210\u5458\u3002\u66f4\u591a\u8be6\u7ec6\u7528\u6cd5\u8bf7\u770b tag \u3002   \u53ef\u4ee5\u4e0d\u6307\u5b9a tags \uff0c\u9ed8\u8ba4\u4e3a None \u3002  \u5f53\u4e0d\u6307\u5b9a tags \u6216\u6307\u5b9a\u4e86 tags \u4f46\u662f\u4e0d\u5305\u542b\u4efb\u4f55 tag \u65f6\uff0cSophon\u4e0d\u4f1a\u5411\u8be5 tags \u6240\u5c5e page \u6587\u4ef6\u4e2d\u751f\u6210\u4efb\u4f55Markdown text\u3002", 
            "title": "tags"
        }, 
        {
            "location": "/user_guide/configuration/#tag", 
            "text": "tag \u8868\u793a\u4e00\u4e2a\u6807\u8bb0\uff0c\u901a\u5e38\u7ed3\u5408\u6a21\u677f\u6587\u4ef6\u6765\u4f7f\u7528\uff0c\u8868\u793a\u751f\u6210\u7684API Markdown text\u5e94\u8be5\u63d2\u5165\u5230\u6a21\u677f\u6587\u4ef6\u7684\u54ea\u4e2a\u5730\u65b9\u3002  \u4e3e\u4e2a\u4f8b\u5b50,\u5047\u8bbe\u6a21\u677f\u6587\u4ef6 /home/user/templates/bb.md \u5185\u5bb9\u4e3a\uff1a  # Hello World\n\n{{tag0}}\n\n## Hello Sophon\n\n{{tag1}}  \u914d\u7f6e\u6587\u4ef6\u4e3a\uff1a  # filename: /home/user/sophon.yml\nbuild_dir: api\ntemplate_dir: templates\n\npages:\n- page: test/aa.md\n  template: bb.md\n  tags:\n  - tag: tag0\n    functions:\n    - mod.func\n  - tag: tag1\n    classes:\n    - mod.clazz  \u5219\u8fd0\u884cSophon\u4e4b\u540e\uff1a   Sophon\u4f1a\u5148\u8bfb\u53d6\u6a21\u677f\u6587\u4ef6 /home/user/templates/bb.md \u91cc\u7684\u5185\u5bb9\uff1b  \u7136\u540e\u5c06\u6807\u8bb0 {{tag0}} \u66ff\u6362\u4e3a\u51fd\u6570 mod.func \u7684API Markdown text\uff1b  \u518d\u5c06\u6807\u8bb0 {{tag1}} \u66ff\u6362\u4e3a\u7c7b mod.clazz \u7684API Markdown text\uff1b  \u6700\u540e\u5c06\u5185\u5bb9\u5199\u5165 /home/user/api/test/aa.md \u4e2d\u3002   \u6ce8\u610f\u7684\u662f\uff0c\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\u4e2d\uff0c\u8be5tag\u4e0b\u5305\u542b\u7684\u51fd\u6570\u3001\u7c7b\u7684API Markdown text\u4f1a\u4f9d\u6b21\u6dfb\u52a0\u5728\u6587\u4ef6\u672b\u5c3e\uff0c\u800c\u4e0d\u662f\u66ff\u6362\u6389\u6a21\u677f\u6587\u4ef6\u4e2d\u7684 {{tag}} \uff1a   \u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u4e86\u4e00\u4e2atag\uff0c\u4f46\u662f\u6ca1\u6709\u7ed9tag\u540d\u65f6\uff1b  \u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u4e86\u4e00\u4e2atag\uff0c\u4f46\u662f\u5728\u6a21\u677f\u6587\u4ef6\u4e2d\u4e0d\u5b58\u5728\u8be5tag\u6807\u8bb0\u65f6\uff1b  \u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u4e86\u4e00\u4e2atag\uff0c\u4f46\u662f\u8be5tag\u6240\u5c5e\u7684 page \u6ca1\u6709\u4f7f\u7528\u6a21\u677f\u6587\u4ef6\u65f6\u3002   \u6bcf\u4e2atag\u6240\u5305\u542b\u7684API\u6309\u7167\u56fa\u5b9a\u987a\u5e8fclasses- classes_with_members- functions\u4f9d\u6b21\u751f\u6210API Markdown text\u3002  \u53e6\u5916\uff0cSophon\u4e0d\u4f1a\u5bf9\u5b58\u5728\u4e8e\u6a21\u677f\u6587\u4ef6\u4f46\u662f\u5374\u6ca1\u6709\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u7684tag\u4f5c\u4efb\u4f55\u5904\u7406\uff0c\u4e5f\u5c31\u662f\u4e00\u5207\u4ee5\u914d\u7f6e\u6587\u4ef6\u4e3a\u51c6\u3002", 
            "title": "tag"
        }, 
        {
            "location": "/user_guide/configuration/#classes", 
            "text": "classes \u662f\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u7c7b\u7684\u5305\u8def\u5f84\u7684\u5217\u8868\u3002  Sophon\u5728\u751f\u6210\u4e00\u4e2a\u7c7b\u7684API\u6587\u6863\u65f6\uff0c\u53ea\u4f1a\u9009\u62e9\u8be5\u7c7b\u7684docstring\u6765\u751f\u6210\u8be5\u7c7b\u6784\u9020\u51fd\u6570\u7684API Markdown text\uff0c\n\u5e76\u4e0d\u5305\u62ec\u8be5\u7c7b\u7684\u6210\u5458\u51fd\u6570\u4e0e\u65b9\u6cd5\u3002", 
            "title": "classes"
        }, 
        {
            "location": "/user_guide/configuration/#classes_with_methods", 
            "text": "classes_with_methods \u662f\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u51fd\u6570\u7684\u5305\u8def\u5f84\u7684\u5217\u8868\u3002  Sophon\u5728\u751f\u6210\u4e00\u4e2a\u7c7b\u7684API\u6587\u6863\u65f6\uff0c\u4f1a\u751f\u6210\u5305\u62ec\u6784\u9020\u51fd\u6570\u5728\u5185\u7684\u8be5\u7c7b\u6240\u6709\u516c\u6709\u6210\u5458\u51fd\u6570\u4e0e\u65b9\u6cd5\u7684API Markdown text\u3002", 
            "title": "classes_with_methods"
        }, 
        {
            "location": "/user_guide/configuration/#functions", 
            "text": "functions \u662f\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u51fd\u6570\u7684\u5305\u8def\u5f84\u7684\u5217\u8868\u3002", 
            "title": "functions"
        }, 
        {
            "location": "/about/release_notes/", 
            "text": "Release Notes\n\n\nMaintenance Team\n\n\nThe current and past members of Sophon team:\n\n\n\n\nZhenpeng Deng(monitor1379)\n\n\n\n\nVersion 0.1.0(2016-12-03)\n\n\nFirst release version.", 
            "title": "Release Notes"
        }, 
        {
            "location": "/about/release_notes/#release-notes", 
            "text": "", 
            "title": "Release Notes"
        }, 
        {
            "location": "/about/release_notes/#maintenance-team", 
            "text": "The current and past members of Sophon team:   Zhenpeng Deng(monitor1379)", 
            "title": "Maintenance Team"
        }, 
        {
            "location": "/about/release_notes/#version-0102016-12-03", 
            "text": "First release version.", 
            "title": "Version 0.1.0(2016-12-03)"
        }, 
        {
            "location": "/about/license/", 
            "text": "MIT License\n\n\nCopyright (c) 2016 \u9093\u632f\u9e4f\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/api/sophon/API/", 
            "text": "API documentations of Sophon\n\n\nThis is some API documentations of Sophon.\n\n\nsophon/parsers.py\n\n\n[source]\n\n\nParser\n\n\nsophon.parsers.Parser()\n\n\n\n\nTop level base class of parsers.\n\n\n\n\n[source]\n\n\nReStructuredTextParser\n\n\nsophon.parsers.ReStructuredTextParser()\n\n\n\n\nSupport soon.\n\n\n\n\n[source]\n\n\nGoogleDocParser\n\n\nsophon.parsers.GoogleDocParser()\n\n\n\n\nSupport soon.\n\n\n\n\n[source]\n\n\nNumPyDocParser\n\n\nsophon.parsers.NumPyDocParser()\n\n\n\n\nSupport soon.\n\n\n\n\nSophonParser\n\n\nsophon.parsers.SophonParser()\n\n\n\n\nA docstring parser for parsing Sophon style docstring to Markdown.\n\n\n\n\n[source]\n\n\nSophonParser.parse_from_class\n\n\nsophon.parsers.SophonParser.parse_from_class(class_, **kwargs)\n\n\n\n\nExtract docstring from class and parse it to Markdown text.\n\n\nArguments\n\n\n\n\nclass_\n: \nclass\n. A class with Sophon style docstring.\n\n\n**kwargs\n: \ndict\n.\n\n\n\n\nReturn\n\n\n\n\nstr\n: Markdown text.\n\n\n\n\n\n\n[source]\n\n\nSophonParser.parse_from_class_with_methods\n\n\nsophon.parsers.SophonParser.parse_from_class_with_methods(class_, **kwargs)\n\n\n\n\nExtract docstring from class and its public members, and parse it to Markdown text.\n\n\nArguments\n\n\n\n\nclass_\n: \nclass\n. A class with Sophon style docstring.\n\n\n**kwargs\n: \ndict\n.\n\n\n\n\nReturn\n\n\n\n\nstr\n: Markdown text.\n\n\n\n\n\n\n[source]\n\n\nSophonParser.parse_from_docstring\n\n\nsophon.parsers.SophonParser.parse_from_docstring(docstring, **kwargs)\n\n\n\n\nParse Sophon style docstring to Markdown text.\n\n\nArguments\n\n\n\n\ndocstring\n: \nstr\n. Sophon style docstring.\n\n\n**kwargs\n: \ndict\n.\n\n\n\n\nReturn\n\n\n\n\nstr\n: Markdown text.\n\n\n\n\n\n\n[source]\n\n\nSophonParser.parse_from_function\n\n\nsophon.parsers.SophonParser.parse_from_function(function, **kwargs)\n\n\n\n\nExtract docstring from function and parse it to Markdown text.\n\n\nArguments\n\n\n\n\nfunction\n: \nfunction\n. A function with Sophon style docstring.\n\n\n**kwargs\n: \ndict\n.\n\n\n\n\nReturn\n\n\n\n\nstr\n: Markdown text.\n\n\n\n\n\n\nsophon/utils.py\n\n\n[source]\n\n\nextract_function_signature\n\n\nsophon.utils.extract_function_signature(function, ismethod=False)\n\n\n\n\nGiven a function, return the signature string of function.\n\n\nArguments\n\n\n\n\nfunction\n: \nfunction\n.\n\n\nismethod\n: \nboolean\n. Represent that if the given function is a method of a class or not.\n    Note that if a \"method\" of class is static, then it is a \nfunction\n instead of \nmethod\n.\n    The simplest way to distinguish \nfunction\n and \nmethod\n is to see if there is a argument\n    named \nself\n in the arguments list of the function.\n\n\n\n\nReturn\n\n\n\n\nstr\n: A string signature of function.\n\n\n\n\nExamples\n\n\nAssume that there are some functions in a module named \nmod\n:\n\n\n# mod.py\nimport sophon\n\ndef foo1():\n    pass\n\ndef foo2(a, b='b', c=None, **kwargs):\n    pass\n\nprint sophon.extract_function_signature(foo1)\n# print \nmod.foo1()\n to the console\n\nprint sophon.extract_function_signature(foo2)\n# print \nmod.foo2(a, b='b', c=None, **kwargs)\n to the console\n\n\n\n\nNow we add a class named \nbar\n to mod.py:\n\n\n# mod.py\nimport sophon\n\nclass bar(object):\n\n    def baz1(self):\n        pass\n\n    def baz2(self, a, b='b', c=None, **kwargs):\n        pass\n\n    @staticmethod\n    def baz3(a, b='b', c=None):\n        pass\n\n\nprint sophon.extract_function_signature(bar.baz1, ismethod=True)\n# print \nmod.bar.baz1()\n to the console\n\nprint sophon.extract_function_signature(bar.baz2, ismethod=True)\n# print \nmod.bar.baz2(a, b='b', c=None, **kwargs)\n to the console\n\nprint sophon.extract_function_signature(bar.baz3, ismethod=False)\n# print \nmod.bar.baz3(a, b='b', c=None, **kwargs)\n to the console\n\n\n\n\n\n\n[source]\n\n\nextract_class_signature\n\n\nsophon.utils.extract_class_signature(clazz)\n\n\n\n\nGiven a class, return the signature string of function \nclass.__init__\n.\n\n\nArgument\n\n\n\n\nclazz\n: \nclass object\n.\n\n\n\n\nReturn\n\n\n\n\nstr\n: A string signature of function \nclass.__init__\n.\n\n\n\n\nExamples\n\n\n# mod.py\nimport sophon\n\nclass foo(object):\n    def __init__(self):\n        pass\n\nclass bar(object):\n    def __init__(self, a, b='b', c=None, **kwargs):\n        pass\n\nprint extract_class_signature(foo)\n# print \nmod.foo()\n to the console\n\nprint extract_class_signature(bar)\n# print \nmod.bar(a, b='b', c=None, **kwargs)\n to the console\n\n\n\n\n\n\n[source]\n\n\ncode_snippet\n\n\nsophon.utils.code_snippet(snippet)\n\n\n\n\nChange a string-typed code snippet into Markdown-style code fence.\n\n\nArgument\n\n\n\n\nsnippet\n: \nstr\n. A code snippet.\n\n\n\n\nReturn\n\n\n\n\nstr\n: Markdown-style code fence.\n\n\n\n\n\n\n[source]\n\n\nimport_from_name\n\n\nsophon.utils.import_from_name(name)\n\n\n\n\nImport module from string.\n\n\nArgument\n\n\n\n\nname\n: \nstr\n. Such as \nfoo\n, \nfoo.someclass\n or \nfoo.somefunction\n.\n\n\n\n\nReturn\n\n\n\n\nmodule\n: It could be module-typed, class-typed or function-typed.\n\n\n\n\n\n\n[source]\n\n\ngenerate_repo_link\n\n\nsophon.utils.generate_repo_link(obj, repo_url, branch)\n\n\n\n\nGet the definition position of obj in source file, then link it to GitHub repo.\n\n\nArguments\n\n\n\n\nobj\n: \nfunction object\n or \nclass object\n.\n\n\nrepo_url\n: \nstr\n. such as \nhttps://github.com/yourusername/yourrepo\n\n\nbranch\n: \nstr\n. repo branch.\n\n\n\n\nReturn\n\n\n\n\nstr\n: Return the hyperlink of obj.\n\n\n\n\n\n\nsophon/build.py\n\n\n[source]\n\n\nbuild_from_yaml\n\n\nsophon.cmd.build.build_from_yaml(config_fn)\n\n\n\n\nBuild documentations of python project given the configuration filename.\n\n\nArgument\n\n\n\n\nconfig_fn\n: \nstr\n. Sophon configuration filename.\n\n\n\n\nReturn\n\n\nNone", 
            "title": "API"
        }, 
        {
            "location": "/api/sophon/API/#api-documentations-of-sophon", 
            "text": "This is some API documentations of Sophon.", 
            "title": "API documentations of Sophon"
        }, 
        {
            "location": "/api/sophon/API/#sophonparserspy", 
            "text": "[source]", 
            "title": "sophon/parsers.py"
        }, 
        {
            "location": "/api/sophon/API/#parser", 
            "text": "sophon.parsers.Parser()  Top level base class of parsers.   [source]", 
            "title": "Parser"
        }, 
        {
            "location": "/api/sophon/API/#restructuredtextparser", 
            "text": "sophon.parsers.ReStructuredTextParser()  Support soon.   [source]", 
            "title": "ReStructuredTextParser"
        }, 
        {
            "location": "/api/sophon/API/#googledocparser", 
            "text": "sophon.parsers.GoogleDocParser()  Support soon.   [source]", 
            "title": "GoogleDocParser"
        }, 
        {
            "location": "/api/sophon/API/#numpydocparser", 
            "text": "sophon.parsers.NumPyDocParser()  Support soon.", 
            "title": "NumPyDocParser"
        }, 
        {
            "location": "/api/sophon/API/#sophonparser", 
            "text": "sophon.parsers.SophonParser()  A docstring parser for parsing Sophon style docstring to Markdown.   [source]", 
            "title": "SophonParser"
        }, 
        {
            "location": "/api/sophon/API/#sophonparserparse_from_class", 
            "text": "sophon.parsers.SophonParser.parse_from_class(class_, **kwargs)  Extract docstring from class and parse it to Markdown text.  Arguments   class_ :  class . A class with Sophon style docstring.  **kwargs :  dict .   Return   str : Markdown text.    [source]", 
            "title": "SophonParser.parse_from_class"
        }, 
        {
            "location": "/api/sophon/API/#sophonparserparse_from_class_with_methods", 
            "text": "sophon.parsers.SophonParser.parse_from_class_with_methods(class_, **kwargs)  Extract docstring from class and its public members, and parse it to Markdown text.  Arguments   class_ :  class . A class with Sophon style docstring.  **kwargs :  dict .   Return   str : Markdown text.    [source]", 
            "title": "SophonParser.parse_from_class_with_methods"
        }, 
        {
            "location": "/api/sophon/API/#sophonparserparse_from_docstring", 
            "text": "sophon.parsers.SophonParser.parse_from_docstring(docstring, **kwargs)  Parse Sophon style docstring to Markdown text.  Arguments   docstring :  str . Sophon style docstring.  **kwargs :  dict .   Return   str : Markdown text.    [source]", 
            "title": "SophonParser.parse_from_docstring"
        }, 
        {
            "location": "/api/sophon/API/#sophonparserparse_from_function", 
            "text": "sophon.parsers.SophonParser.parse_from_function(function, **kwargs)  Extract docstring from function and parse it to Markdown text.  Arguments   function :  function . A function with Sophon style docstring.  **kwargs :  dict .   Return   str : Markdown text.", 
            "title": "SophonParser.parse_from_function"
        }, 
        {
            "location": "/api/sophon/API/#sophonutilspy", 
            "text": "[source]", 
            "title": "sophon/utils.py"
        }, 
        {
            "location": "/api/sophon/API/#extract_function_signature", 
            "text": "sophon.utils.extract_function_signature(function, ismethod=False)  Given a function, return the signature string of function.  Arguments   function :  function .  ismethod :  boolean . Represent that if the given function is a method of a class or not.\n    Note that if a \"method\" of class is static, then it is a  function  instead of  method .\n    The simplest way to distinguish  function  and  method  is to see if there is a argument\n    named  self  in the arguments list of the function.   Return   str : A string signature of function.   Examples  Assume that there are some functions in a module named  mod :  # mod.py\nimport sophon\n\ndef foo1():\n    pass\n\ndef foo2(a, b='b', c=None, **kwargs):\n    pass\n\nprint sophon.extract_function_signature(foo1)\n# print  mod.foo1()  to the console\n\nprint sophon.extract_function_signature(foo2)\n# print  mod.foo2(a, b='b', c=None, **kwargs)  to the console  Now we add a class named  bar  to mod.py:  # mod.py\nimport sophon\n\nclass bar(object):\n\n    def baz1(self):\n        pass\n\n    def baz2(self, a, b='b', c=None, **kwargs):\n        pass\n\n    @staticmethod\n    def baz3(a, b='b', c=None):\n        pass\n\n\nprint sophon.extract_function_signature(bar.baz1, ismethod=True)\n# print  mod.bar.baz1()  to the console\n\nprint sophon.extract_function_signature(bar.baz2, ismethod=True)\n# print  mod.bar.baz2(a, b='b', c=None, **kwargs)  to the console\n\nprint sophon.extract_function_signature(bar.baz3, ismethod=False)\n# print  mod.bar.baz3(a, b='b', c=None, **kwargs)  to the console   [source]", 
            "title": "extract_function_signature"
        }, 
        {
            "location": "/api/sophon/API/#extract_class_signature", 
            "text": "sophon.utils.extract_class_signature(clazz)  Given a class, return the signature string of function  class.__init__ .  Argument   clazz :  class object .   Return   str : A string signature of function  class.__init__ .   Examples  # mod.py\nimport sophon\n\nclass foo(object):\n    def __init__(self):\n        pass\n\nclass bar(object):\n    def __init__(self, a, b='b', c=None, **kwargs):\n        pass\n\nprint extract_class_signature(foo)\n# print  mod.foo()  to the console\n\nprint extract_class_signature(bar)\n# print  mod.bar(a, b='b', c=None, **kwargs)  to the console   [source]", 
            "title": "extract_class_signature"
        }, 
        {
            "location": "/api/sophon/API/#code_snippet", 
            "text": "sophon.utils.code_snippet(snippet)  Change a string-typed code snippet into Markdown-style code fence.  Argument   snippet :  str . A code snippet.   Return   str : Markdown-style code fence.    [source]", 
            "title": "code_snippet"
        }, 
        {
            "location": "/api/sophon/API/#import_from_name", 
            "text": "sophon.utils.import_from_name(name)  Import module from string.  Argument   name :  str . Such as  foo ,  foo.someclass  or  foo.somefunction .   Return   module : It could be module-typed, class-typed or function-typed.    [source]", 
            "title": "import_from_name"
        }, 
        {
            "location": "/api/sophon/API/#generate_repo_link", 
            "text": "sophon.utils.generate_repo_link(obj, repo_url, branch)  Get the definition position of obj in source file, then link it to GitHub repo.  Arguments   obj :  function object  or  class object .  repo_url :  str . such as  https://github.com/yourusername/yourrepo  branch :  str . repo branch.   Return   str : Return the hyperlink of obj.", 
            "title": "generate_repo_link"
        }, 
        {
            "location": "/api/sophon/API/#sophonbuildpy", 
            "text": "[source]", 
            "title": "sophon/build.py"
        }, 
        {
            "location": "/api/sophon/API/#build_from_yaml", 
            "text": "sophon.cmd.build.build_from_yaml(config_fn)  Build documentations of python project given the configuration filename.  Argument   config_fn :  str . Sophon configuration filename.   Return  None", 
            "title": "build_from_yaml"
        }
    ]
}