{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Sophon's Documentations\n\n\nWhat is Sophon?\n\n\nSophon is a \nmarkdown API documentation automatic generator\n that makes it easy to create\nintelligent and beautiful documentation,\nwritten by Zhenpeng Deng and licensed under the MIT license.\n\n\nWhy Sophon?\n\n\nFeatures:\n\n\n\n\nMarkdown formats.\n\n\nAutomatic documentation.\n\n\nFlexible.\n\n\nWorks on Windows, Linux and macOS.\n\n\n\n\nWhat does \"Sophon\" mean?\n\n\nSophon\n is the official translation of \"\n\u667a\u5b50\n\" in \u300aRememberance of Earth's Past II: The Dark Forest\u300b\nwhich is written by the famous Chinese science fiction writer named \nCixin Liu(\u5218\u6148\u6b23)\n.\n\n\nSophon\n is a word amalgamation of \nSophia/sophist/sophisticated\n, meaning \nwisdom\n, \nand \nProton/Electron/Neutron/Photon\n, meaning \nparticle\n,\nconsisting of a supercomputer embedded into a single proton that could fold itself to eleven space dimensions.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-sophons-documentations", 
            "text": "", 
            "title": "Welcome to Sophon's Documentations"
        }, 
        {
            "location": "/#what-is-sophon", 
            "text": "Sophon is a  markdown API documentation automatic generator  that makes it easy to create\nintelligent and beautiful documentation,\nwritten by Zhenpeng Deng and licensed under the MIT license.", 
            "title": "What is Sophon?"
        }, 
        {
            "location": "/#why-sophon", 
            "text": "Features:   Markdown formats.  Automatic documentation.  Flexible.  Works on Windows, Linux and macOS.", 
            "title": "Why Sophon?"
        }, 
        {
            "location": "/#what-does-sophon-mean", 
            "text": "Sophon  is the official translation of \" \u667a\u5b50 \" in \u300aRememberance of Earth's Past II: The Dark Forest\u300b\nwhich is written by the famous Chinese science fiction writer named  Cixin Liu(\u5218\u6148\u6b23) .  Sophon  is a word amalgamation of  Sophia/sophist/sophisticated , meaning  wisdom , \nand  Proton/Electron/Neutron/Photon , meaning  particle ,\nconsisting of a supercomputer embedded into a single proton that could fold itself to eleven space dimensions.", 
            "title": "What does \"Sophon\" mean?"
        }, 
        {
            "location": "/api/sophon/", 
            "text": "sophon/core.py\n\n\n[source]\n\n\nextract_function_signature\n\n\nsophon.utils.extract_function_signature(function, ismethod=False)\n\n\n\n\nGiven a function, return the signature string of function.\n\n\nArguments\n\n\n\n\nfunction\n: \nfunction object\n.\n\n\nismethod\n: \nboolean\n. represents that the function is a method of a class or not.\n    Note that if a \"method\" of class is static, then it is a \nfunction\n instead of \nmethod\n.\n    The simplest way to distinguish \nfunction\n and \nmethod\n is to see if there is a argument\n    named \nself\n in the arguments list of the function.\n\n\n\n\nReturns\n\n\nstr\n. A string signature of function.\n\n\nExamples\n\n\nAssume that there are some functions in a module named \nmod\n:\n\n\n# mod.py\nimport sophon\n\ndef foo1():\n    pass\n\ndef foo2(a, b='b', c=None, **kwargs):\n    pass\n\nprint sophon.extract_function_signature(foo1)\n# print \nmod.foo1()\n to the console\n\nprint sophon.extract_function_signature(foo2)\n# print \nmod.foo2(a, b='b', c=None, **kwargs)\n to the console\n\n\n\n\nnow we add a class named \nbar\n to mod.py:\n\n\n# mod.py\nimport sophon\n\nclass bar(object):\n\n    def baz1(self):\n        pass\n\n    def baz2(self, a, b='b', c=None, **kwargs):\n        pass\n\n    @staticmethod\n    def baz3(a, b='b', c=None):\n        pass\n\n\nprint sophon.extract_function_signature(bar.baz1, ismethod=True)\n# print \nmod.bar.baz1()\n to the console\n\nprint sophon.extract_function_signature(bar.baz2, ismethod=True)\n# print \nmod.bar.baz2(a, b='b', c=None, **kwargs)\n to the console\n\nprint sophon.extract_function_signature(bar.baz3, ismethod=False)\n# print \nmod.bar.baz3(a, b='b', c=None, **kwargs)\n to the console\n\n\n\n\n\n\n[source]\n\n\nextract_class_signature\n\n\nsophon.utils.extract_class_signature(clazz)\n\n\n\n\nGiven a class, return the signature string of function \nclass.__init__\n.\n\n\nArguments\n\n\n\n\nclazz\n: \nclass object\n.\n\n\n\n\nReturns\n\n\nstr\n. A string signature of function \nclass.__init__\n.\n\n\nExamples\n\n\n# mod.py\nimport sophon\n\nclass foo(object):\n    def __init__(self):\n        pass\n\nclass bar(object):\n    def __init__(self, a, b='b', c=None, **kwargs):\n        pass\n\nprint extract_class_signature(foo)\n# print \nmod.foo()\n to the console\n\nprint extract_class_signature(bar)\n# print \nmod.bar(a, b='b', c=None, **kwargs)\n to the console\n\n\n\n\n\n\n[source]\n\n\ncode_snippet\n\n\nsophon.utils.code_snippet(snippet)\n\n\n\n\nChange a string-typed code snippet into markdown-style code fence.\n\n\nArguments\n\n\n\n\nsnippet\n: \nstr\n. a code snippet.\n\n\n\n\nReturns\n\n\nstr\n. markdown-style code fence.\n\n\n\n\n[source]\n\n\nimport_from_name\n\n\nsophon.utils.import_from_name(name)\n\n\n\n\nImport module from string.\n\n\nArguments\n\n\n\n\nname\n: \nstr\n. such as \nfoo\n, \nfoo.someclass\n or \nfoo.somefunction\n.\n\n\n\n\nReturns\n\n\nmodule object\n. it could be module-typed, class-typed or function-typed.\n\n\n\n\n[source]\n\n\ngenerate_repo_link\n\n\nsophon.utils.generate_repo_link(obj, repo_url, branch)\n\n\n\n\nGet the definition position of obj in source file, then link it to GitHub repo.\n\n\nArguments\n\n\n\n\nobj\n: \nfunction object\n or \nclass object\n.\n\n\nrepo_url\n: \nstr\n. such as \nhttps://github.com/yourusername/yourrepo\n\n\nbranch\n: \nstr\n. repo branch.\n\n\n\n\nReturns\n\n\nstr\n. Return the hyperlink of obj.", 
            "title": "API"
        }, 
        {
            "location": "/api/sophon/#sophoncorepy", 
            "text": "[source]", 
            "title": "sophon/core.py"
        }, 
        {
            "location": "/api/sophon/#extract_function_signature", 
            "text": "sophon.utils.extract_function_signature(function, ismethod=False)  Given a function, return the signature string of function.  Arguments   function :  function object .  ismethod :  boolean . represents that the function is a method of a class or not.\n    Note that if a \"method\" of class is static, then it is a  function  instead of  method .\n    The simplest way to distinguish  function  and  method  is to see if there is a argument\n    named  self  in the arguments list of the function.   Returns  str . A string signature of function.  Examples  Assume that there are some functions in a module named  mod :  # mod.py\nimport sophon\n\ndef foo1():\n    pass\n\ndef foo2(a, b='b', c=None, **kwargs):\n    pass\n\nprint sophon.extract_function_signature(foo1)\n# print  mod.foo1()  to the console\n\nprint sophon.extract_function_signature(foo2)\n# print  mod.foo2(a, b='b', c=None, **kwargs)  to the console  now we add a class named  bar  to mod.py:  # mod.py\nimport sophon\n\nclass bar(object):\n\n    def baz1(self):\n        pass\n\n    def baz2(self, a, b='b', c=None, **kwargs):\n        pass\n\n    @staticmethod\n    def baz3(a, b='b', c=None):\n        pass\n\n\nprint sophon.extract_function_signature(bar.baz1, ismethod=True)\n# print  mod.bar.baz1()  to the console\n\nprint sophon.extract_function_signature(bar.baz2, ismethod=True)\n# print  mod.bar.baz2(a, b='b', c=None, **kwargs)  to the console\n\nprint sophon.extract_function_signature(bar.baz3, ismethod=False)\n# print  mod.bar.baz3(a, b='b', c=None, **kwargs)  to the console   [source]", 
            "title": "extract_function_signature"
        }, 
        {
            "location": "/api/sophon/#extract_class_signature", 
            "text": "sophon.utils.extract_class_signature(clazz)  Given a class, return the signature string of function  class.__init__ .  Arguments   clazz :  class object .   Returns  str . A string signature of function  class.__init__ .  Examples  # mod.py\nimport sophon\n\nclass foo(object):\n    def __init__(self):\n        pass\n\nclass bar(object):\n    def __init__(self, a, b='b', c=None, **kwargs):\n        pass\n\nprint extract_class_signature(foo)\n# print  mod.foo()  to the console\n\nprint extract_class_signature(bar)\n# print  mod.bar(a, b='b', c=None, **kwargs)  to the console   [source]", 
            "title": "extract_class_signature"
        }, 
        {
            "location": "/api/sophon/#code_snippet", 
            "text": "sophon.utils.code_snippet(snippet)  Change a string-typed code snippet into markdown-style code fence.  Arguments   snippet :  str . a code snippet.   Returns  str . markdown-style code fence.   [source]", 
            "title": "code_snippet"
        }, 
        {
            "location": "/api/sophon/#import_from_name", 
            "text": "sophon.utils.import_from_name(name)  Import module from string.  Arguments   name :  str . such as  foo ,  foo.someclass  or  foo.somefunction .   Returns  module object . it could be module-typed, class-typed or function-typed.   [source]", 
            "title": "import_from_name"
        }, 
        {
            "location": "/api/sophon/#generate_repo_link", 
            "text": "sophon.utils.generate_repo_link(obj, repo_url, branch)  Get the definition position of obj in source file, then link it to GitHub repo.  Arguments   obj :  function object  or  class object .  repo_url :  str . such as  https://github.com/yourusername/yourrepo  branch :  str . repo branch.   Returns  str . Return the hyperlink of obj.", 
            "title": "generate_repo_link"
        }
    ]
}